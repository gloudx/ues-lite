package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"ues-lite/datastore"

	badger4 "github.com/ipfs/go-ds-badger4"
	"github.com/urfave/cli/v2"
)

const (
	DefaultDataDir = "./.data"
	AppName        = "ues-ds"
	AppVersion     = "1.0.0"
)

type app struct {
	ds       datastore.Datastore
	isRemote bool
}

func newApp(dataDir string) (*app, error) {
	if err := os.MkdirAll(dataDir, 0755); err != nil {
		return nil, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	ds, err := datastore.NewDatastorage(dataDir, &badger4.DefaultOptions)
	if err != nil {
		return nil, fmt.Errorf("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è datastore: %w", err)
	}

	return &app{ds: ds}, nil
}

func (app *app) Close() error {
	if app.ds != nil {
		return app.ds.Close()
	}
	return nil
}

// func newRemoteApp(endpoint string) (*app, error) {
// 	ds, err := NewRemoteDatastore(endpoint)
// 	if err != nil {
// 		return nil, fmt.Errorf("–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –¥–∞—Ç–∞—Å—Ç–æ—Ä—É: %w", err)
// 	}

// 	// –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è RemoteDatastore
// 	adapter := &RemoteDatastoreAdapter{ds}

// 	return &app{ds: adapter, isRemote: true}, nil
// }

func initApp(c *cli.Context) (*app, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	// if endpoint := c.String("endpoint"); endpoint != "" {
	// 	fmt.Printf("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É: %s\n", endpoint)
	// 	return newRemoteApp(endpoint)
	// }

	// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
	return newApp(c.String("data"))
}

var commands = []*cli.Command{}

func main() {
	app := &cli.App{
		Name:    AppName,
		Usage:   "–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏ –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ",
		Version: AppVersion,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "data",
				Aliases: []string{"d"},
				Value:   DefaultDataDir,
				Usage:   "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
				EnvVars: []string{"UES_DATA_DIR"},
			},
			&cli.StringFlag{
				Name:    "endpoint",
				Aliases: []string{"e"},
				Usage:   "–≠–Ω–¥–ø–æ–∏–Ω—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞ (http://host:port –∏–ª–∏ unix:///path/to/socket)",
				EnvVars: []string{"UES_ENDPOINT"},
			},
		},
		Commands: commands,
		Before: func(c *cli.Context) error {
			// –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --data –∏ --endpoint –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
			if c.String("data") != DefaultDataDir && c.String("endpoint") != "" {
				return fmt.Errorf("–Ω–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --data –∏ --endpoint")
			}
			return nil
		},
		Description: `UES Datastore - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:

1. –õ–û–ö–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):
   ues-ds --data ./mydata list
   ues-ds put /test "Hello World"

2. –£–î–ê–õ–ï–ù–ù–´–ô –†–ï–ñ–ò–ú (—á–µ—Ä–µ–∑ API):
   ues-ds --endpoint http://localhost:8080 list
   ues-ds --endpoint unix:///tmp/ues-ds.sock put /test "Hello World"

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
   UES_DATA_DIR    - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   UES_ENDPOINT    - —ç–Ω–¥–ø–æ–∏–Ω—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

–ü—Ä–∏–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:
   http://localhost:8080        # HTTP —Å–µ—Ä–≤–µ—Ä
   https://myserver.com:8080    # HTTPS —Å–µ—Ä–≤–µ—Ä  
   unix:///tmp/ues-ds.sock     # Unix socket

–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'serve'.`,
	}

	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}

func formatBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d –ë", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %c–ë", float64(bytes)/float64(div), "KMGTPE"[exp])
}

func isUTF8(data []byte) bool {
	return string(data) == strings.ToValidUTF8(string(data), "")
}

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"
	"time"
	"ues-lite/datastore"

	ds "github.com/ipfs/go-datastore"
	badger4 "github.com/ipfs/go-ds-badger4"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

const (
	DefaultDataDir = "./.data"
	AppName        = "ds-cli"
	AppVersion     = "1.0.0"
)

func main() {
	app := &cli.App{
		Name:    AppName,
		Usage:   "–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏ –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ",
		Version: AppVersion,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "data",
				Aliases: []string{"d"},
				Value:   DefaultDataDir,
				Usage:   "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
				EnvVars: []string{"UES_DATA_DIR"},
			},
		},
		Commands: []*cli.Command{
			{
				Name:    "put",
				Aliases: []string{"p"},
				Usage:   "–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á",
				Flags: []cli.Flag{
					&cli.DurationFlag{
						Name:    "ttl",
						Aliases: []string{"t"},
						Usage:   "–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1h, 30m, 60s)",
					},
					&cli.BoolFlag{
						Name:    "json",
						Aliases: []string{"j"},
						Usage:   "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ JSON",
					},
				},
				Action:    putKey,
				ArgsUsage: "<–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>",
			},
			{
				Name:    "get",
				Aliases: []string{"g"},
				Usage:   "–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "json",
						Aliases: []string{"j"},
						Usage:   "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON –≤—ã–≤–æ–¥",
					},
				},
				Action:    getKey,
				ArgsUsage: "<–∫–ª—é—á>",
			},
			{
				Name:      "delete",
				Aliases:   []string{"d", "del"},
				Usage:     "–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
				Action:    deleteKey,
				ArgsUsage: "<–∫–ª—é—á>",
			},
			{
				Name:    "list",
				Aliases: []string{"l", "ls"},
				Usage:   "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "prefix",
						Aliases: []string{"p"},
						Value:   "/",
						Usage:   "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π",
					},
					&cli.BoolFlag{
						Name:    "keys-only",
						Aliases: []string{"k"},
						Usage:   "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π",
					},
					&cli.IntFlag{
						Name:    "limit",
						Aliases: []string{"n"},
						Usage:   "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
					},
				},
				Action: listKeys,
			},
			{
				Name:    "search",
				Aliases: []string{"s"},
				Usage:   "–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "case-sensitive",
						Aliases: []string{"c"},
						Usage:   "–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
					},
					&cli.BoolFlag{
						Name:    "keys-only",
						Aliases: []string{"k"},
						Usage:   "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π",
					},
					&cli.IntFlag{
						Name:    "limit",
						Aliases: []string{"n"},
						Usage:   "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
					},
				},
				Action:    searchKeys,
				ArgsUsage: "<–ø–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞>",
			},
			{
				Name:  "clear",
				Usage: "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "force",
						Aliases: []string{"f"},
						Usage:   "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
					},
				},
				Action: clearKeys,
			},
			{
				Name:      "info",
				Aliases:   []string{"i"},
				Usage:     "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ",
				Action:    keyInfo,
				ArgsUsage: "<–∫–ª—é—á>",
			},
			{
				Name:   "stats",
				Usage:  "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞",
				Action: stats,
			},
		},
	}

	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}

func openDatastore(ctx *cli.Context) (datastore.Datastore, error) {
	path := ctx.String("data")
	if err := os.MkdirAll(path, 0755); err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %w", err)
	}
	opts := &badger4.DefaultOptions
	ds, err := datastore.NewDatastorage(path, opts)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∞—Ç–∞—Å—Ç–æ—Ä: %w", err)
	}
	return ds, nil
}

func putKey(ctx *cli.Context) error {
	if ctx.NArg() < 2 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}
	key := ctx.Args().Get(0)
	value := ctx.Args().Get(1)
	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()
	dsKey := ds.NewKey(key)
	var data []byte
	if ctx.Bool("json") {
		var jsonData interface{}
		if err := json.Unmarshal([]byte(value), &jsonData); err != nil {
			return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π JSON: %w", err)
		}
		data, _ = json.Marshal(jsonData)
	} else {
		data = []byte(value)
	}
	ctxTimeout, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	ttl := ctx.Duration("ttl")
	if ttl > 0 {
		err = store.PutWithTTL(ctxTimeout, dsKey, data, ttl)
		fmt.Printf("‚úÖ –ö–ª—é—á '%s' —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å TTL %v\n", key, ttl)
	} else {
		err = store.Put(ctxTimeout, dsKey, data)
		fmt.Printf("‚úÖ –ö–ª—é—á '%s' —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n", key)
	}
	return err
}

func getKey(ctx *cli.Context) error {
	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á")
	}
	key := ctx.Args().Get(0)
	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()
	dsKey := ds.NewKey(key)
	ctxTimeout, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	data, err := store.Get(ctxTimeout, dsKey)
	if err != nil {
		if err == ds.ErrNotFound {
			return fmt.Errorf("–∫–ª—é—á '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω", key)
		}
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞: %w", err)
	}
	if ctx.Bool("json") {
		var jsonData interface{}
		if err := json.Unmarshal(data, &jsonData); err == nil {
			formatted, _ := json.MarshalIndent(jsonData, "", "  ")
			fmt.Println(string(formatted))
		} else {
			fmt.Println(string(data))
		}
	} else {
		fmt.Println(string(data))
	}
	return nil
}

func deleteKey(ctx *cli.Context) error {
	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á")
	}
	key := ctx.Args().Get(0)
	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()
	dsKey := ds.NewKey(key)
	ctxTimeout, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	err = store.Delete(ctxTimeout, dsKey)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: %w", err)
	}
	fmt.Printf("üóëÔ∏è  –ö–ª—é—á '%s' —É–¥–∞–ª—ë–Ω\n", key)
	return nil
}

func listKeys(ctx *cli.Context) error {
	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()
	prefix := ctx.String("prefix")
	keysOnly := ctx.Bool("keys-only")
	limit := ctx.Int("limit")
	dsPrefix := ds.NewKey(prefix)
	ctxTimeout, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()
	kvChan, errChan, err := store.Iterator(ctxTimeout, dsPrefix, keysOnly)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: %w", err)
	}
	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.SetStyle(table.StyleColoredBright)
	if keysOnly {
		t.AppendHeader(table.Row{"#", "–ö–ª—é—á"})
	} else {
		t.AppendHeader(table.Row{"#", "–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–†–∞–∑–º–µ—Ä"})
	}
	count := 0
	for {
		select {
		case kv, ok := <-kvChan:
			if !ok {
				goto done
			}
			count++
			if limit > 0 && count > limit {
				goto done
			}
			if keysOnly {
				t.AppendRow(table.Row{count, kv.Key.String()})
			} else {
				value := string(kv.Value)
				if len(value) > 100 {
					value = value[:97] + "..."
				}
				t.AppendRow(table.Row{count, kv.Key.String(), value, fmt.Sprintf("%d –±–∞–π—Ç", len(kv.Value))})
			}
		case err := <-errChan:
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏: %w", err)
			}
		}
	}
done:
	if count == 0 {
		fmt.Printf("üîç –ö–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n", prefix)
		return nil
	}
	t.Render()
	fmt.Printf("\nüìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: %d\n", count)
	return nil
}

func searchKeys(ctx *cli.Context) error {
	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞")
	}

	searchStr := ctx.Args().Get(0)
	caseSensitive := ctx.Bool("case-sensitive")
	keysOnly := ctx.Bool("keys-only")
	limit := ctx.Int("limit")

	if !caseSensitive {
		searchStr = strings.ToLower(searchStr)
	}

	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()

	ctxTimeout, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	kvChan, errChan, err := store.Iterator(ctxTimeout, ds.NewKey("/"), keysOnly)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: %w", err)
	}

	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.SetStyle(table.StyleColoredBright)

	if keysOnly {
		t.AppendHeader(table.Row{"#", "–ö–ª—é—á"})
	} else {
		t.AppendHeader(table.Row{"#", "–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–†–∞–∑–º–µ—Ä"})
	}

	count := 0
	found := 0

	for {
		select {
		case kv, ok := <-kvChan:
			if !ok {
				goto done
			}
			count++

			keyStr := kv.Key.String()
			searchKey := keyStr
			if !caseSensitive {
				searchKey = strings.ToLower(searchKey)
			}

			if strings.Contains(searchKey, searchStr) {
				found++

				if limit > 0 && found > limit {
					goto done
				}

				if keysOnly {
					t.AppendRow(table.Row{found, keyStr})
				} else {
					value := string(kv.Value)
					if len(value) > 100 {
						value = value[:97] + "..."
					}
					t.AppendRow(table.Row{found, keyStr, value, fmt.Sprintf("%d –±–∞–π—Ç", len(kv.Value))})
				}
			}

		case err := <-errChan:
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏: %w", err)
			}
		}
	}

done:
	if found == 0 {
		fmt.Printf("üîç –ö–ª—é—á–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ %d –∫–ª—é—á–µ–π)\n", searchStr, count)
		return nil
	}

	t.Render()
	fmt.Printf("\nüìä –ù–∞–π–¥–µ–Ω–æ: %d –∏–∑ %d –∫–ª—é—á–µ–π\n", found, count)
	return nil
}

func clearKeys(ctx *cli.Context) error {
	force := ctx.Bool("force")

	if !force {
		fmt.Print("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–ª—é—á–∏? (y/N): ")
		var response string
		fmt.Scanln(&response)
		if strings.ToLower(response) != "y" && strings.ToLower(response) != "–¥–∞" {
			fmt.Println("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
			return nil
		}
	}

	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()

	ctxTimeout, cancel := context.WithTimeout(context.Background(), 120*time.Second)
	defer cancel()

	err = store.Clear(ctxTimeout)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞: %w", err)
	}

	fmt.Println("üßπ –î–∞—Ç–∞—Å—Ç–æ—Ä –æ—á–∏—â–µ–Ω")
	return nil
}

func keyInfo(ctx *cli.Context) error {
	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á")
	}

	key := ctx.Args().Get(0)

	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()

	dsKey := ds.NewKey(key)

	ctxTimeout, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
	exists, err := store.Has(ctxTimeout, dsKey)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞: %w", err)
	}

	if !exists {
		fmt.Printf("‚ùå –ö–ª—é—á '%s' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n", key)
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
	data, err := store.Get(ctxTimeout, dsKey)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TTL
	expiration, err := store.GetExpiration(ctxTimeout, dsKey)
	var ttlInfo string
	if err != nil {
		ttlInfo = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	} else if expiration.IsZero() {
		ttlInfo = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	} else {
		remaining := time.Until(expiration)
		if remaining > 0 {
			ttlInfo = fmt.Sprintf("–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %v (%s)", remaining, expiration.Format("2006-01-02 15:04:05"))
		} else {
			ttlInfo = "–ò—Å—Ç—ë–∫"
		}
	}

	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.SetStyle(table.StyleColoredBright)
	t.SetTitle("‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ")

	t.AppendRow(table.Row{"–ö–ª—é—á", key})
	t.AppendRow(table.Row{"–†–∞–∑–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è", fmt.Sprintf("%d –±–∞–π—Ç", len(data))})
	t.AppendRow(table.Row{"TTL", ttlInfo})

	// –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
	var contentType string
	if json.Valid(data) {
		contentType = "JSON"
	} else if isUTF8(data) {
		contentType = "–¢–µ–∫—Å—Ç (UTF-8)"
	} else {
		contentType = "–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
	}
	t.AppendRow(table.Row{"–¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ", contentType})

	t.Render()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∑–Ω–∞—á–µ–Ω–∏—è
	fmt.Println("\nüìÑ –ü—Ä–µ–≤—å—é –∑–Ω–∞—á–µ–Ω–∏—è:")
	if len(data) > 500 {
		fmt.Printf("%s...\n[–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ %d –±–∞–π—Ç]\n", string(data[:500]), len(data))
	} else {
		fmt.Println(string(data))
	}

	return nil
}

func stats(ctx *cli.Context) error {
	store, err := openDatastore(ctx)
	if err != nil {
		return err
	}
	defer store.Close()

	ctxTimeout, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–∏
	keysChan, errChan, err := store.Keys(ctxTimeout, ds.NewKey("/"))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: %w", err)
	}

	totalKeys := 0
	for {
		select {
		case _, ok := <-keysChan:
			if !ok {
				goto countDone
			}
			totalKeys++
		case err := <-errChan:
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∫–ª—é—á–µ–π: %w", err)
			}
		}
	}

countDone:
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
	kvChan, errChan2, err := store.Iterator(ctxTimeout, ds.NewKey("/"), false)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: %w", err)
	}

	var totalSize int64
	for {
		select {
		case kv, ok := <-kvChan:
			if !ok {
				goto sizeDone
			}
			totalSize += int64(len(kv.Value))
		case err := <-errChan2:
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Ä–∞–∑–º–µ—Ä–∞: %w", err)
			}
		}
	}

sizeDone:
	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.SetStyle(table.StyleColoredBright)
	t.SetTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞")

	t.AppendRow(table.Row{"–ü—É—Ç—å", ctx.String("path")})
	t.AppendRow(table.Row{"–í—Å–µ–≥–æ –∫–ª—é—á–µ–π", totalKeys})
	t.AppendRow(table.Row{"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π", formatBytes(totalSize)})

	if totalKeys > 0 {
		avgSize := totalSize / int64(totalKeys)
		t.AppendRow(table.Row{"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è", formatBytes(avgSize)})
	}

	t.Render()
	return nil
}

func formatBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d –ë", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %c–ë", float64(bytes)/float64(div), "KMGTPE"[exp])
}

func isUTF8(data []byte) bool {
	return string(data) == strings.ToValidUTF8(string(data), "")
}

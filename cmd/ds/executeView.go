package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func executeView(ctx *cli.Context) error {
	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è ID view")
	}

	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	viewID := ctx.Args().Get(0)
	useCache := ctx.Bool("cache")
	refresh := ctx.Bool("refresh")
	format := ctx.String("format")
	limit := ctx.Int("limit")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ view
	view, exists := app.ds.GetView(viewID)
	if !exists {
		return fmt.Errorf("view '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω", viewID)
	}

	ctxTimeout, cancel := context.WithTimeout(context.Background(), ctx.Duration("timeout"))
	defer cancel()

	// –û–±–Ω–æ–≤–ª—è–µ–º view –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
	if refresh {
		fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ view '%s'...\n", viewID)
		if err := view.Refresh(ctxTimeout); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è view: %w", err)
		}
	}

	var results []interface{}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if useCache {
		fmt.Printf("üíæ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...\n")
		if cached, found, err := view.GetCached(ctxTimeout); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %w", err)
		} else if found {
			fmt.Printf("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n")
			for _, result := range cached {
				results = append(results, map[string]interface{}{
					"key":       result.Key.String(),
					"value":     result.Value,
					"score":     result.Score,
					"metadata":  result.Metadata,
					"timestamp": result.Timestamp.Format(time.RFC3339),
				})
			}
		} else {
			fmt.Printf("‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º view...\n")
			viewResults, err := view.Execute(ctxTimeout)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è view: %w", err)
			}
			for _, result := range viewResults {
				results = append(results, map[string]interface{}{
					"key":       result.Key.String(),
					"value":     result.Value,
					"score":     result.Score,
					"metadata":  result.Metadata,
					"timestamp": result.Timestamp.Format(time.RFC3339),
				})
			}
		}
	} else {
		fmt.Printf("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ view '%s'...\n", viewID)
		viewResults, err := view.Execute(ctxTimeout)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è view: %w", err)
		}
		for _, result := range viewResults {
			results = append(results, map[string]interface{}{
				"key":       result.Key.String(),
				"value":     result.Value,
				"score":     result.Score,
				"metadata":  result.Metadata,
				"timestamp": result.Timestamp.Format(time.RFC3339),
			})
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if limit > 0 && len(results) > limit {
		results = results[:limit]
		fmt.Printf("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã %d –∑–∞–ø–∏—Å—è–º–∏\n", limit)
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	switch format {
	case "json":
		jsonData, err := json.MarshalIndent(results, "", "  ")
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %w", err)
		}
		fmt.Println(string(jsonData))

	case "jsonl":
		for _, result := range results {
			jsonData, err := json.Marshal(result)
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: %v\n", err)
				continue
			}
			fmt.Println(string(jsonData))
		}

	case "table":
		fallthrough
	default:
		if len(results) == 0 {
			fmt.Println("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
			return nil
		}

		t := table.NewWriter()
		t.SetOutputMirror(os.Stdout)
		t.SetStyle(table.StyleColoredBright)
		t.SetTitle(fmt.Sprintf("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã view '%s'", viewID))

		includeScore := ctx.Bool("include-score")
		includeTimestamp := ctx.Bool("include-timestamp")

		headers := []interface{}{"#", "–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ"}
		if includeScore {
			headers = append(headers, "–†–µ–π—Ç–∏–Ω–≥")
		}
		if includeTimestamp {
			headers = append(headers, "–í—Ä–µ–º—è")
		}
		t.AppendHeader(table.Row(headers))

		for i, result := range results {
			if resultMap, ok := result.(map[string]interface{}); ok {
				key := resultMap["key"].(string)
				value := fmt.Sprintf("%v", resultMap["value"])

				// –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
				if len(value) > 100 {
					value = value[:97] + "..."
				}

				row := []interface{}{i + 1, key, value}

				if includeScore {
					score := resultMap["score"]
					row = append(row, fmt.Sprintf("%.2f", score))
				}

				if includeTimestamp {
					timestamp := resultMap["timestamp"].(string)
					if t, err := time.Parse(time.RFC3339, timestamp); err == nil {
						row = append(row, t.Format("15:04:05"))
					} else {
						row = append(row, timestamp)
					}
				}

				t.AppendRow(table.Row(row))
			}
		}

		t.Render()
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É view
	stats := view.Stats()
	fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ view:\n")
	fmt.Printf("   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n", len(results))
	fmt.Printf("   –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %d\n", stats.RefreshCount)
	if stats.ExecutionTimeMs > 0 {
		fmt.Printf("   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %d–º—Å\n", stats.ExecutionTimeMs)
	}
	if stats.CacheHits > 0 || stats.CacheMisses > 0 {
		fmt.Printf("   –ö—ç—à: %d –ø–æ–ø–∞–¥–∞–Ω–∏–π, %d –ø—Ä–æ–º–∞—Ö–æ–≤\n", stats.CacheHits, stats.CacheMisses)
	}

	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "execute-view",
		Aliases: []string{"exec-view", "ev"},
		Usage:   "–í—ã–ø–æ–ª–Ω–∏—Ç—å view –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:    "cache",
				Aliases: []string{"c"},
				Usage:   "–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
			},
			&cli.BoolFlag{
				Name:    "refresh",
				Aliases: []string{"r"},
				Usage:   "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º",
			},
			&cli.StringFlag{
				Name:    "format",
				Aliases: []string{"f"},
				Value:   "table",
				Usage:   "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (table, json, jsonl)",
			},
			&cli.IntFlag{
				Name:    "limit",
				Aliases: []string{"n"},
				Usage:   "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
			},
			&cli.DurationFlag{
				Name:  "timeout",
				Value: 60 * time.Second,
				Usage: "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
			},
			&cli.BoolFlag{
				Name:  "include-score",
				Usage: "–í–∫–ª—é—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ç–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥",
			},
			&cli.BoolFlag{
				Name:  "include-timestamp",
				Usage: "–í–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥",
			},
		},
		Action:    executeView,
		ArgsUsage: "<view-id>",
		Description: `–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π view –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

View –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ 
—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω—ã –≤ 
—Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.

–§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞:
- table: —Ç–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
- json: JSON —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- jsonl: JSON Lines (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)

–ü—Ä–∏–º–µ—Ä—ã:
  # –í—ã–ø–æ–ª–Ω–∏—Ç—å view —Å –∫—ç—à–µ–º
  ues-ds execute-view active-users --cache
  
  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
  ues-ds execute-view user-profiles --refresh
  
  # –í—ã–≤–æ–¥ –≤ JSON —Å –ª–∏–º–∏—Ç–æ–º
  ues-ds execute-view recent-posts --format json --limit 10
  
  # –¢–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
  ues-ds execute-view top-products --include-score --include-timestamp`,
	})
}

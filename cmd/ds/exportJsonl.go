package main

import (
	"archive/zip"
	"bufio"
	"compress/gzip"
	"context"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
	"ues-lite/datastore"

	ds "github.com/ipfs/go-datastore"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
	"github.com/urfave/cli/v2"
)

// ExportRecord –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
type ExportRecord struct {
	Key       string            `json:"key"`
	Value     string            `json:"value"`
	Timestamp int64             `json:"timestamp,omitempty"`
	Size      int               `json:"size,omitempty"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

func exportJSONL(ctx *cli.Context) error {

	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
	prefix := ctx.String("prefix")
	output := ctx.String("output")
	format := ctx.String("format")
	patch := ctx.StringSlice("patch")
	extract := ctx.String("extract")
	limit := ctx.Int("limit")
	startKey := ctx.String("start")
	endKey := ctx.String("end")
	includeMetadata := ctx.Bool("metadata")
	skipSystem := ctx.Bool("skip-system")
	compress := ctx.Bool("compress")
	batchSize := ctx.Int("batch-size")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctxTimeout, cancel := context.WithTimeout(context.Background(), 300*time.Second)
	defer cancel()

	fmt.Printf("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON Lines\n")
	fmt.Printf("üè∑Ô∏è  –ü—Ä–µ—Ñ–∏–∫—Å: %s\n", prefix)
	if output != "" {
		fmt.Printf("üìÑ –í—ã–≤–æ–¥: %s\n", output)
	} else {
		fmt.Printf("üìÑ –í—ã–≤–æ–¥: –∫–æ–Ω—Å–æ–ª—å\n")
	}
	fmt.Printf("üìã –§–æ—Ä–º–∞—Ç: %s\n", format)

	// –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä
	dsPrefix := ds.NewKey(prefix)
	kvChan, errChan, err := app.ds.Iterator(ctxTimeout, dsPrefix, false)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–∏—Å–∞—Ç–µ–ª—å
	writer, closer, err := createWriter(output, compress)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Å–∞—Ç–µ–ª—è: %w", err)
	}
	defer closer()

	exported := 0
	skipped := 0
	batch := make([]string, 0, batchSize)

	for {
		select {
		case <-ctxTimeout.Done():
			return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: %w", ctxTimeout.Err())

		case kv, ok := <-kvChan:
			if !ok {
				// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è batch
				if len(batch) > 0 {
					if err := writeBatch(writer, batch); err != nil {
						return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ batch: %w", err)
					}
				}
				goto done
			}

			keyStr := kv.Key.String()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª—é—á–µ–π
			if startKey != "" && keyStr < startKey {
				skipped++
				continue
			}
			if endKey != "" && keyStr > endKey {
				// –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
				if len(batch) > 0 {
					if err := writeBatch(writer, batch); err != nil {
						return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ batch: %w", err)
					}
				}
				goto done
			}

			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª—é—á–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			if skipSystem && strings.HasPrefix(keyStr, "/_system/") {
				skipped++
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
			if limit > 0 && exported >= limit {
				if len(batch) > 0 {
					if err := writeBatch(writer, batch); err != nil {
						return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ batch: %w", err)
					}
				}
				goto done
			}

			var jsonBytes []byte
			if format == "value-only" {
				jsonBytes = kv.Value
			} else {
				record, err := createExportRecord(kv, format, includeMetadata)
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞ %s: %v\n", keyStr, err)
					skipped++
					continue
				}
				jsonBytes, err = json.Marshal(record)
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞ %s: %v\n", keyStr, err)
					skipped++
					continue
				}
			}

			if extract != "" {
				jsonBytes = []byte(gjson.GetBytes(jsonBytes, extract).String())
			}

			if len(patch) > 0 {
				for _, p := range patch {
					var err error
					k, v, ok := strings.Cut(p, "=")
					if ok {
						var value any = v
						var t string
						t, v, ok = strings.Cut(v, "#")
						if ok {
							switch t {
							case "int":
								value = parseInt(v)
							case "float":
								value = parseFloat(v)
							case "bool":
								value = parseBool(v)
							case "json":
								var jsonVal any
								if err := json.Unmarshal([]byte(v), &jsonVal); err != nil {
									fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –≤ –ø–∞—Ç—á–µ '%s' –¥–ª—è –∫–ª—é—á–∞ %s: %v\n", p, keyStr, err)
									skipped++
									continue
								}
								value = jsonVal
							default:
								value = v // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∞
							}
						}
						jsonBytes, err = sjson.SetBytes(jsonBytes, k, value)
						if err != nil {
							fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞ '%s' –∫ –∫–ª—é—á—É %s: %v\n", p, keyStr, err)
							skipped++
							continue
						}
					}
				}
			}

			batch = append(batch, string(jsonBytes))
			exported++

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º batch –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–∞–∑–º–µ—Ä–∞
			if len(batch) >= batchSize {
				if err := writeBatch(writer, batch); err != nil {
					return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ batch: %w", err)
				}
				batch = batch[:0] // –û—á–∏—â–∞–µ–º batch

				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
				if exported%10000 == 0 {
					fmt.Printf("üìà –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: %d –∑–∞–ø–∏—Å–µ–π\n", exported)
				}
			}

		case err := <-errChan:
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏: %w", err)
			}
		}
	}

done:
	fmt.Printf("\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n")
	fmt.Printf("üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: %d –∑–∞–ø–∏—Å–µ–π\n", exported)
	if skipped > 0 {
		fmt.Printf("‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: %d –∑–∞–ø–∏—Å–µ–π\n", skipped)
	}

	return nil
}

func createExportRecord(kv datastore.KeyValue, format string, includeMetadata bool) (interface{}, error) {

	keyStr := kv.Key.String()
	valueStr := string(kv.Value)

	switch format {
	case "simple":
		// –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
		return map[string]string{
			"key":   keyStr,
			"value": valueStr,
		}, nil

	case "full":
		// –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
		record := ExportRecord{
			Key:       keyStr,
			Value:     valueStr,
			Timestamp: time.Now().Unix(),
			Size:      len(kv.Value),
		}

		if includeMetadata {
			record.Metadata = make(map[string]string)

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
			if json.Valid(kv.Value) {
				record.Metadata["content_type"] = "json"
			} else if isUTF8(kv.Value) {
				record.Metadata["content_type"] = "text"
			} else {
				record.Metadata["content_type"] = "binary"
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –∫–ª—é—á–∞ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
			parts := strings.Split(strings.Trim(keyStr, "/"), "/")
			for i, part := range parts {
				if part != "" {
					record.Metadata[fmt.Sprintf("key_part_%d", i)] = part
				}
			}
		}

		return record, nil

	case "value-only":
		// –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
		var jsonValue interface{}
		if json.Valid(kv.Value) {
			if err := json.Unmarshal(kv.Value, &jsonValue); err == nil {
				return jsonValue, nil
			}
		}
		return valueStr, nil

	default:
		return nil, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: %s", format)
	}
}

func createWriter(output string, compress bool) (*bufio.Writer, func() error, error) {
	if output == "" || output == "-" {
		// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
		return bufio.NewWriter(os.Stdout), func() error {
			return nil
		}, nil
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	dir := filepath.Dir(output)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return nil, nil, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %w", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
	ext := strings.ToLower(filepath.Ext(output))

	switch ext {
	case ".zip":
		return createZipWriter(output)
	case ".gz":
		return createGzipWriter(output)
	default:
		// –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
		file, err := os.Create(output)
		if err != nil {
			return nil, nil, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: %w", err)
		}

		writer := bufio.NewWriter(file)
		closer := func() error {
			writer.Flush()
			return file.Close()
		}

		return writer, closer, nil
	}
}

func createGzipWriter(filename string) (*bufio.Writer, func() error, error) {
	file, err := os.Create(filename)
	if err != nil {
		return nil, nil, err
	}

	gzipWriter := gzip.NewWriter(file)
	writer := bufio.NewWriter(gzipWriter)

	closer := func() error {
		writer.Flush()
		gzipWriter.Close()
		return file.Close()
	}

	return writer, closer, nil
}

func createZipWriter(filename string) (*bufio.Writer, func() error, error) {
	file, err := os.Create(filename)
	if err != nil {
		return nil, nil, err
	}

	zipWriter := zip.NewWriter(file)

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞
	baseName := strings.TrimSuffix(filepath.Base(filename), ".zip")
	if !strings.HasSuffix(baseName, ".jsonl") {
		baseName += ".jsonl"
	}

	zipFile, err := zipWriter.Create(baseName)
	if err != nil {
		zipWriter.Close()
		file.Close()
		return nil, nil, err
	}

	writer := bufio.NewWriter(zipFile)
	closer := func() error {
		writer.Flush()
		zipWriter.Close()
		return file.Close()
	}

	return writer, closer, nil
}

func writeBatch(writer *bufio.Writer, batch []string) error {
	for _, line := range batch {
		if _, err := writer.WriteString(line + "\n"); err != nil {
			return err
		}
	}
	return writer.Flush()
}

// parseInt converts a string to int64, returns 0 on error
func parseInt(s string) int64 {
	i, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		return 0
	}
	return i
}

// parseFloat converts a string to float64, returns 0.0 on error
func parseFloat(s string) float64 {
	f, err := strconv.ParseFloat(s, 64)
	if err != nil {
		return 0.0
	}
	return f
}

// parseBool converts a string to bool, returns false on error
func parseBool(s string) bool {
	b, err := strconv.ParseBool(s)
	if err != nil {
		return false
	}
	return b
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "export-jsonl",
		Aliases: []string{"export", "dump"},
		Usage:   "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON Lines —Ñ–æ—Ä–º–∞—Ç",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "prefix",
				Aliases: []string{"p"},
				Value:   "/",
				Usage:   "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π",
			},
			&cli.StringSliceFlag{
				Name:  "patch",
				Usage: "",
			},
			&cli.StringFlag{
				Name:  "extract",
				Usage: "",
			},
			&cli.StringFlag{
				Name:    "output",
				Aliases: []string{"o"},
				Usage:   "–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Å–æ–ª—å). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç .jsonl, .gz, .zip",
			},
			&cli.StringFlag{
				Name:    "format",
				Aliases: []string{"f"},
				Value:   "value-only",
				Usage:   "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: 'simple', 'full', 'value-only'",
			},
			&cli.IntFlag{
				Name:    "limit",
				Aliases: []string{"n"},
				Usage:   "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π",
			},
			&cli.StringFlag{
				Name:  "start",
				Usage: "–ù–∞—á–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)",
			},
			&cli.StringFlag{
				Name:  "end",
				Usage: "–ö–æ–Ω–µ—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)",
			},
			&cli.BoolFlag{
				Name:    "metadata",
				Aliases: []string{"m"},
				Usage:   "–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —ç–∫—Å–ø–æ—Ä—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è 'full' —Ñ–æ—Ä–º–∞—Ç–∞)",
			},
			&cli.BoolFlag{
				Name:  "skip-system",
				Usage: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª—é—á–∏ (/_system/*)",
				Value: true,
			},
			&cli.BoolFlag{
				Name:    "compress",
				Aliases: []string{"z"},
				Usage:   "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∂–∞—Ç–∏–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è .gz/.zip)",
			},
			&cli.IntFlag{
				Name:    "batch-size",
				Aliases: []string{"b"},
				Value:   1000,
				Usage:   "–†–∞–∑–º–µ—Ä batch –¥–ª—è –∑–∞–ø–∏—Å–∏",
			},
		},
		Action:    exportJSONL,
		ArgsUsage: " ",
		Description: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞ –≤ JSON Lines —Ñ–æ—Ä–º–∞—Ç.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:
- simple: {"key": "...", "value": "..."} - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
- full: –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∫–ª—é—á–∞—è —Ä–∞–∑–º–µ—Ä, –≤—Ä–µ–º—è, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ  
- value-only: —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
- –ö–æ–Ω—Å–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
- –û–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã (.jsonl)
- –°–∂–∞—Ç—ã–µ —Ñ–∞–π–ª—ã (.gz)
- ZIP –∞—Ä—Ö–∏–≤—ã (.zip)

–ü—Ä–∏–º–µ—Ä—ã:
  ues-ds export-jsonl --prefix="/logs" --output=logs.jsonl
  ues-ds export --format=full --metadata -o backup.zip -n 10000  
  ues-ds dump --start="/user/a" --end="/user/z" --output=users.gz
  ues-ds export-jsonl --prefix="/events" --format=value-only > events.json
  ues-ds export --skip-system=false --output=full-backup.jsonl`,
	})
}

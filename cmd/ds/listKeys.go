package main

import (
	"context"
	"fmt"
	"os"
	"time"

	ds "github.com/ipfs/go-datastore"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func listKeys(ctx *cli.Context) error {

	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	prefix := ctx.String("prefix")
	keysOnly := ctx.Bool("keys-only")
	limit := ctx.Int("limit")

	dsPrefix := ds.NewKey(prefix)

	ctxTimeout, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	kvChan, errChan, err := app.ds.Iterator(ctxTimeout, dsPrefix, keysOnly)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: %w", err)
	}

	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.SetStyle(table.StyleColoredBright)
	if keysOnly {
		t.AppendHeader(table.Row{"#", "–ö–ª—é—á"})
	} else {
		t.AppendHeader(table.Row{"#", "–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–†–∞–∑–º–µ—Ä"})
	}

	count := 0
	for {
		select {

		case kv, ok := <-kvChan:

			if !ok {
				goto done
			}

			count++
			if limit > 0 && count > limit {
				goto done
			}

			if keysOnly {
				t.AppendRow(table.Row{count, kv.Key.String()})
			} else {
				value := string(kv.Value)
				if len(value) > 100 {
					value = value[:97] + "..."
				}
				t.AppendRow(table.Row{count, kv.Key.String(), value, fmt.Sprintf("%d –±–∞–π—Ç", len(kv.Value))})
			}

		case err := <-errChan:

			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏: %w", err)
			}
		}
	}

done:
	if count == 0 {
		fmt.Printf("üîç –ö–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n", prefix)
		return nil
	}

	t.Render()

	fmt.Printf("\nüìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: %d\n", count)

	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "list",
		Aliases: []string{"l", "ls"},
		Usage:   "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "prefix",
				Aliases: []string{"p"},
				Value:   "/",
				Usage:   "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π",
			},
			&cli.BoolFlag{
				Name:    "keys-only",
				Aliases: []string{"k"},
				Usage:   "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π",
			},
			&cli.IntFlag{
				Name:    "limit",
				Aliases: []string{"n"},
				Usage:   "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
			},
		},
		Action: listKeys,
	})
}

package main

import (
	"fmt"
	"os"

	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func listViews(ctx *cli.Context) error {
	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	views := app.ds.ListViews()

	if len(views) == 0 {
		fmt.Println("üìã Views –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return nil
	}

	detailed := ctx.Bool("detailed")

	if detailed {
		// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
		for i, view := range views {
			if i > 0 {
				fmt.Println()
			}

			config := view.Config()
			stats := view.Stats()

			fmt.Printf("üîç View: %s\n", config.ID)
			fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", config.Name)
			if config.Description != "" {
				fmt.Printf("   –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", config.Description)
			}
			fmt.Printf("   –ò—Å—Ç–æ—á–Ω–∏–∫: %s\n", config.SourcePrefix)
			if config.TargetPrefix != "" {
				fmt.Printf("   –¶–µ–ª—å: %s\n", config.TargetPrefix)
			}
			if config.FilterScript != "" {
				fmt.Printf("   –§–∏–ª—å—Ç—Ä: %s\n", truncateString(config.FilterScript, 60))
			}
			if config.TransformScript != "" {
				fmt.Printf("   –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: %s\n", truncateString(config.TransformScript, 60))
			}
			if config.SortScript != "" {
				fmt.Printf("   –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: %s\n", truncateString(config.SortScript, 60))
			}

			fmt.Printf("   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: %v", config.EnableCaching)
			if config.EnableCaching {
				fmt.Printf(" (TTL: %v)", config.CacheTTL)
			}
			fmt.Println()

			fmt.Printf("   –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %v", config.AutoRefresh)
			if config.AutoRefresh {
				fmt.Printf(" (debounce: %v)", config.RefreshDebounce)
			}
			fmt.Println()

			if config.MaxResults > 0 {
				fmt.Printf("   –ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n", config.MaxResults)
			}

			fmt.Printf("   –°–æ–∑–¥–∞–Ω: %s\n", config.CreatedAt.Format("2006-01-02 15:04:05"))
			fmt.Printf("   –û–±–Ω–æ–≤–ª–µ–Ω: %s\n", config.UpdatedAt.Format("2006-01-02 15:04:05"))

			// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
			if stats.RefreshCount > 0 {
				fmt.Printf("   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: %d\n", stats.RefreshCount)
				fmt.Printf("   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s\n", stats.LastRefresh.Format("2006-01-02 15:04:05"))
				fmt.Printf("   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n", stats.ResultCount)
				if stats.ExecutionTimeMs > 0 {
					fmt.Printf("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %d–º—Å\n", stats.ExecutionTimeMs)
				}
				if stats.CacheHits > 0 || stats.CacheMisses > 0 {
					fmt.Printf("   –ö—ç—à: %d –ø–æ–ø–∞–¥–∞–Ω–∏–π, %d –ø—Ä–æ–º–∞—Ö–æ–≤\n", stats.CacheHits, stats.CacheMisses)
				}
				if stats.ErrorCount > 0 {
					fmt.Printf("   –û—à–∏–±–æ–∫: %d\n", stats.ErrorCount)
					if stats.LastError != "" {
						fmt.Printf("   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: %s\n", stats.LastError)
					}
				}
			}
		}
	} else {
		// –¢–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
		t := table.NewWriter()
		t.SetOutputMirror(os.Stdout)
		t.SetStyle(table.StyleColoredBright)
		t.SetTitle("üìã –°–ø–∏—Å–æ–∫ Views")

		t.AppendHeader(table.Row{"ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ò—Å—Ç–æ—á–Ω–∏–∫", "–ö—ç—à", "–ê–≤—Ç–æ", "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π", "–û—à–∏–±–æ–∫"})

		for _, view := range views {
			config := view.Config()
			stats := view.Stats()

			cache := "‚ùå"
			if config.EnableCaching {
				cache = "‚úÖ"
			}

			autoRefresh := "‚ùå"
			if config.AutoRefresh {
				autoRefresh = "‚úÖ"
			}

			t.AppendRow(table.Row{
				config.ID,
				truncateString(config.Name, 20),
				truncateString(config.SourcePrefix, 20),
				cache,
				autoRefresh,
				stats.ResultCount,
				stats.RefreshCount,
				stats.ErrorCount,
			})
		}

		t.Render()
	}

	fmt.Printf("\nüìä –í—Å–µ–≥–æ views: %d\n", len(views))
	return nil
}

func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "list-views",
		Aliases: []string{"lv", "views"},
		Usage:   "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö views",
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:    "detailed",
				Aliases: []string{"d"},
				Usage:   "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º view",
			},
		},
		Action: listViews,
		Description: `–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö views —Å –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.

–í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
–í –ø–æ–¥—Ä–æ–±–Ω–æ–º —Ä–µ–∂–∏–º–µ (-d/--detailed) –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º view:
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ñ–∏–ª—å—Ç—Ä—ã, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
- –ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫

–ü—Ä–∏–º–µ—Ä—ã:
  # –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
  ues-ds list-views
  
  # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  ues-ds list-views --detailed`,
	})
}

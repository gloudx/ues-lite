package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"time"
	"ues-lite/datastore"

	ds "github.com/ipfs/go-datastore"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func queryJQ(ctx *cli.Context) error {
	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è jq –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
	}

	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	jqQuery := ctx.Args().Get(0)
	mode := ctx.String("mode")
	prefix := ctx.String("prefix")
	output := ctx.String("output")
	pretty := ctx.Bool("pretty")

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è jq –∑–∞–ø—Ä–æ—Å–∞
	opts := &datastore.JQQueryOptions{
		Prefix:           ds.NewKey(prefix),
		KeysOnly:         ctx.Bool("keys-only"),
		Limit:            ctx.Int("limit"),
		Timeout:          ctx.Duration("timeout"),
		TreatAsString:    ctx.Bool("treat-as-string"),
		IgnoreParseError: ctx.Bool("ignore-errors"),
	}

	ctxTimeout, cancel := context.WithTimeout(context.Background(), opts.Timeout)
	defer cancel()

	fmt.Printf("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ jq –∑–∞–ø—Ä–æ—Å–∞: %s\n", jqQuery)
	fmt.Printf("üìÅ –ü—Ä–µ—Ñ–∏–∫—Å: %s\n", prefix)
	fmt.Printf("‚öôÔ∏è  –†–µ–∂–∏–º: %s\n", mode)

	switch mode {
	case "single":
		return executeJQSingle(ctxTimeout, app, jqQuery, ctx.String("key"), output, pretty)
	case "aggregate":
		return executeJQAggregate(ctxTimeout, app, jqQuery, opts, output, pretty)
	case "query":
		fallthrough
	default:
		return executeJQQuery(ctxTimeout, app, jqQuery, opts, output, pretty)
	}
}

func executeJQSingle(ctx context.Context, app *app, jqQuery, keyStr, output string, pretty bool) error {
	if keyStr == "" {
		return fmt.Errorf("–¥–ª—è —Ä–µ–∂–∏–º–∞ 'single' —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á —á–µ—Ä–µ–∑ --key")
	}

	key := ds.NewKey(keyStr)
	result, err := app.ds.QueryJQSingle(ctx, key, jqQuery)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è jq –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	return outputResult(result, output, pretty, "single")
}

func executeJQAggregate(ctx context.Context, app *app, jqQuery string, opts *datastore.JQQueryOptions, output string, pretty bool) error {
	result, err := app.ds.AggregateJQ(ctx, jqQuery, opts)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ jq –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	return outputResult(result, output, pretty, "aggregate")
}

func executeJQQuery(ctx context.Context, app *app, jqQuery string, opts *datastore.JQQueryOptions, output string, pretty bool) error {

	resultChan, errorChan, err := app.ds.QueryJQ(ctx, jqQuery, opts)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è jq –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	var results []map[string]interface{}
	count := 0

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–≤–æ–¥–∞
	t := table.NewWriter()
	if output == "" || output == "table" {
		t.SetOutputMirror(os.Stdout)
		t.SetStyle(table.StyleColoredBright)
		t.SetTitle("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã jq –∑–∞–ø—Ä–æ—Å–∞")
		t.AppendHeader(table.Row{"#", "–ö–ª—é—á", "–†–µ–∑—É–ª—å—Ç–∞—Ç"})
	}

	for {
		select {
		case <-ctx.Done():
			return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", ctx.Err())

		case err, ok := <-errorChan:
			if ok && err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
			}

		case result, ok := <-resultChan:

			if !ok {
				// –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç - –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
				goto done
			}

			if result.Value != nil {

				count++

				if output == "" || output == "table" {
					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
					var resultStr string
					if result.Value != nil {
						if jsonBytes, err := json.Marshal(result.Value); err == nil {
							resultStr = string(jsonBytes)
							// –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
							if len(resultStr) > 100 {
								resultStr = resultStr[:97] + "..."
							}
						} else {
							resultStr = fmt.Sprintf("%v", result.Value)
						}
					} else {
						resultStr = "<null>"
					}
					t.AppendRow(table.Row{count, result.Key.String(), resultStr})
				} else {
					// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è JSON –≤—ã–≤–æ–¥–∞
					resultMap := map[string]any{
						"key":   result.Key.String(),
						"value": result.Value,
					}
					results = append(results, resultMap)
				}
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
			if count%1000 == 0 && count > 0 {
				fmt.Printf("üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d –∑–∞–ø–∏—Å–µ–π\n", count)
			}
		}
	}

done:
	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if output == "" || output == "table" {
		if count > 0 {
			t.Render()
		}
		fmt.Printf("\nüìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n", count)
	} else {
		return outputResults(results, output, pretty)
	}

	return nil
}

func outputResult(result interface{}, output string, pretty bool, mode string) error {
	switch output {
	case "", "json":
		return outputJSON(result, pretty)
	case "raw":
		fmt.Printf("%v\n", result)
		return nil
	default:
		return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: %s", output)
	}
}

func outputResults(results []map[string]interface{}, output string, pretty bool) error {
	switch output {
	case "json":
		return outputJSON(results, pretty)
	case "jsonl":
		return outputJSONL(results)
	case "raw":
		for _, result := range results {
			fmt.Printf("%v\n", result["value"])
		}
		return nil
	default:
		return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: %s", output)
	}
}

func outputJSON(data interface{}, pretty bool) error {
	var output []byte
	var err error

	if pretty {
		output, err = json.MarshalIndent(data, "", "  ")
	} else {
		output, err = json.Marshal(data)
	}

	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %w", err)
	}

	fmt.Println(string(output))
	return nil
}

func outputJSONL(results []map[string]interface{}) error {
	for _, result := range results {
		output, err := json.Marshal(result)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSONL: %w", err)
		}
		fmt.Println(string(output))
	}
	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "jq",
		Aliases: []string{"query"},
		Usage:   "–í—ã–ø–æ–ª–Ω–∏—Ç—å jq –∑–∞–ø—Ä–æ—Å –∫ –¥–∞–Ω–Ω—ã–º –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "prefix",
				Aliases: []string{"p"},
				Value:   "/",
				Usage:   "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π",
			},
			&cli.StringFlag{
				Name:    "mode",
				Aliases: []string{"m"},
				Value:   "query",
				Usage:   "–†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 'query', 'aggregate', 'single'",
			},
			&cli.StringFlag{
				Name:  "key",
				Usage: "–ö–ª—é—á –¥–ª—è —Ä–µ–∂–∏–º–∞ 'single'",
			},
			&cli.StringFlag{
				Name:    "output",
				Aliases: []string{"o"},
				Usage:   "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: 'table', 'json', 'jsonl', 'raw'",
			},
			&cli.BoolFlag{
				Name:    "pretty",
				Aliases: []string{"P"},
				Usage:   "–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON",
				Value:   true,
			},
			&cli.BoolFlag{
				Name:    "keys-only",
				Aliases: []string{"k"},
				Usage:   "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π",
			},
			&cli.IntFlag{
				Name:    "limit",
				Aliases: []string{"n"},
				Usage:   "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π",
			},
			&cli.DurationFlag{
				Name:    "timeout",
				Aliases: []string{"t"},
				Value:   60 * time.Second,
				Usage:   "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞",
			},
			&cli.BoolFlag{
				Name:  "treat-as-string",
				Usage: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ JSON",
			},
			&cli.BoolFlag{
				Name:  "ignore-errors",
				Usage: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
			},
		},
		Action:    queryJQ,
		ArgsUsage: "<jq-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>",
		Description: `–í—ã–ø–æ–ª–Ω—è–µ—Ç jq –∑–∞–ø—Ä–æ—Å—ã –∫ –¥–∞–Ω–Ω—ã–º –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—Ä–µ—Ö —Ä–µ–∂–∏–º–æ–≤:

–†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:
‚Ä¢ query    - –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ jq –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ aggregate - –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
‚Ä¢ single   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ jq –Ω–∞–¥ –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º (—Ç—Ä–µ–±—É–µ—Ç --key)

–§–û–†–ú–ê–¢–´ –í–´–í–û–î–ê:
‚Ä¢ table - –¢–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–µ–∂–∏–º–∞ query)  
‚Ä¢ json  - JSON —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ jsonl - JSON Lines (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
‚Ä¢ raw   - –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

jq –í–´–†–ê–ñ–ï–ù–ò–Ø:
jq - –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é,
—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

–ü–†–ò–ú–ï–†–´:

1. –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:
   ues-ds jq 'select(.age > 21)' --prefix="/users"
   
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π:
   ues-ds jq '{name: .name, email: .email}' --prefix="/users" --output=json
   
3. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:
   ues-ds jq 'group_by(.category) | map({category: .[0].category, count: length})'
   ues-ds jq --mode=aggregate 'map(.price) | add' --prefix="/products"
   
4. –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏:
   ues-ds jq '.items[] | select(.active == true)'
   ues-ds jq 'map(select(.status == "active")) | length'
   
5. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
   ues-ds jq 'map(.amount) | add' --mode=aggregate --prefix="/transactions"
   ues-ds jq 'map(.price) | [min, max, (add / length)]' --mode=aggregate
   
6. –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:
   ues-ds jq 'if .type == "premium" then .price * 0.9 else .price end'
   
7. –†–∞–±–æ—Ç–∞ —Å –∫–ª—é—á–∞–º–∏:
   ues-ds jq '. + {key_parts: (env.key | split("/"))}' --keys-only=false
   
8. –ó–∞–ø—Ä–æ—Å –∫ –æ–¥–Ω–æ–º—É –∫–ª—é—á—É:
   ues-ds jq '.user.profile' --mode=single --key="/users/john"
   
9. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:
   ues-ds jq 'split(",") | map(tonumber) | add' --treat-as-string --prefix="/csv-data"
   
10. –°–ª–æ–∂–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    ues-ds jq 'group_by(.department) | map({
      dept: .[0].department, 
      employees: length, 
      avg_salary: (map(.salary) | add / length)
    })' --mode=aggregate
    
11. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏:
    ues-ds jq 'select(.created_at > "2024-01-01") | {id, name, created_at}'
    
12. –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º:
    ues-ds jq 'select(.timestamp > now - 86400) | .data'

–ü–û–õ–ï–ó–ù–´–ï jq –§–£–ù–ö–¶–ò–ò:
‚Ä¢ select(—É—Å–ª–æ–≤–∏–µ) - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
‚Ä¢ map(–≤—ã—Ä–∞–∂–µ–Ω–∏–µ) - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
‚Ä¢ group_by(–ø–æ–ª–µ) - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
‚Ä¢ sort_by(–ø–æ–ª–µ) - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞  
‚Ä¢ unique_by(–ø–æ–ª–µ) - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
‚Ä¢ min, max, add - –∞–≥—Ä–µ–≥–∞—Ü–∏—è
‚Ä¢ length - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ keys - –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞
‚Ä¢ has("–∫–ª—é—á") - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
‚Ä¢ empty - –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –≤—ã–≤–æ–¥–∞)

–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
–î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --limit –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
–∏ --timeout –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.`,
	})
}

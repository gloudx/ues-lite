package main

import (
	"context"
	"fmt"
	"time"

	"github.com/urfave/cli/v2"
)

func refreshView(ctx *cli.Context) error {
	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	all := ctx.Bool("all")
	invalidateCache := ctx.Bool("invalidate-cache")

	if all {
		return refreshAllViews(app, invalidateCache, ctx.Duration("timeout"))
	}

	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è ID view –∏–ª–∏ —Ñ–ª–∞–≥ --all")
	}

	viewID := ctx.Args().Get(0)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ view
	view, exists := app.ds.GetView(viewID)
	if !exists {
		return fmt.Errorf("view '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω", viewID)
	}

	ctxTimeout, cancel := context.WithTimeout(context.Background(), ctx.Duration("timeout"))
	defer cancel()

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
	if invalidateCache {
		fmt.Printf("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ view '%s'...\n", viewID)
		if err := view.InvalidateCache(ctxTimeout); err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v\n", err)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	statsBefore := view.Stats()

	fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ view '%s'...\n", viewID)
	start := time.Now()

	err = view.Refresh(ctxTimeout)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è view: %w", err)
	}

	duration := time.Since(start)

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	statsAfter := view.Stats()

	fmt.Printf("‚úÖ View '%s' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\n", viewID)
	fmt.Printf("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", duration)
	fmt.Printf("   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n", statsAfter.ResultCount)
	if statsAfter.ExecutionTimeMs > 0 {
		fmt.Printf("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è view: %d–º—Å\n", statsAfter.ExecutionTimeMs)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
	if statsAfter.RefreshCount > statsBefore.RefreshCount {
		fmt.Printf("   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: %d ‚Üí %d\n", statsBefore.RefreshCount, statsAfter.RefreshCount)
	}

	if statsAfter.ErrorCount > statsBefore.ErrorCount {
		fmt.Printf("   ‚ö†Ô∏è  –ù–æ–≤—ã—Ö –æ—à–∏–±–æ–∫: %d\n", statsAfter.ErrorCount-statsBefore.ErrorCount)
		if statsAfter.LastError != "" {
			fmt.Printf("   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: %s\n", statsAfter.LastError)
		}
	}

	return nil
}

func refreshAllViews(app *app, invalidateCache bool, timeout time.Duration) error {
	views := app.ds.ListViews()

	if len(views) == 0 {
		fmt.Println("üìã Views –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return nil
	}

	ctxTimeout, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()

	fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö views (%d)...\n", len(views))
	start := time.Now()

	successCount := 0
	errorCount := 0

	for _, view := range views {
		fmt.Printf("   üîÑ %s... ", view.ID())

		// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
		if invalidateCache {
			if err := view.InvalidateCache(ctxTimeout); err != nil {
				fmt.Printf("‚ùå (–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %v)\n", err)
				errorCount++
				continue
			}
		}

		err := view.Refresh(ctxTimeout)
		if err != nil {
			fmt.Printf("‚ùå (–æ—à–∏–±–∫–∞: %v)\n", err)
			errorCount++
		} else {
			stats := view.Stats()
			fmt.Printf("‚úÖ (%d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)\n", stats.ResultCount)
			successCount++
		}
	}

	duration := time.Since(start)

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n")
	fmt.Printf("   –£—Å–ø–µ—à–Ω–æ: %d\n", successCount)
	if errorCount > 0 {
		fmt.Printf("   –û—à–∏–±–æ–∫: %d\n", errorCount)
	}
	fmt.Printf("   –û–±—â–µ–µ –≤—Ä–µ–º—è: %v\n", duration)

	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "refresh-view",
		Aliases: []string{"refresh-views", "rv"},
		Usage:   "–û–±–Ω–æ–≤–∏—Ç—å view(s)",
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:    "all",
				Aliases: []string{"a"},
				Usage:   "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ views",
			},
			&cli.BoolFlag{
				Name:    "invalidate-cache",
				Aliases: []string{"i"},
				Usage:   "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
			},
			&cli.DurationFlag{
				Name:  "timeout",
				Value: 120 * time.Second,
				Usage: "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
			},
		},
		Action:    refreshView,
		ArgsUsage: "[view-id]",
		Description: `–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π view –∏–ª–∏ –≤—Å–µ views.

–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ view –≤–∫–ª—é—á–∞–µ—Ç:
- –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ (—Ñ–∏–ª—å—Ç—Ä, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
- –û–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö  
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö views (--all) –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ,
–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.

–§–ª–∞–≥ --invalidate-cache –æ—á–∏—â–∞–µ—Ç –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç
–ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–ü—Ä–∏–º–µ—Ä—ã:
  # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π view
  ues-ds refresh-view user-profiles
  
  # –û–±–Ω–æ–≤–∏—Ç—å —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
  ues-ds refresh-view active-users --invalidate-cache
  
  # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ views
  ues-ds refresh-view --all
  
  # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ views —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
  ues-ds refresh-view --all --timeout 5m`,
	})
}

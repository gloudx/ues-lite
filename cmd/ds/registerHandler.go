package main

import (
	"context"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
	"ues-lite/datastore"

	"github.com/urfave/cli/v2"
)

func registerHandler(ctx *cli.Context) error {

	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è ID –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
	}

	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	id := ctx.Args().Get(0)
	var script string

	// –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞
	if ctx.NArg() >= 2 {
		script = ctx.Args().Get(1)
	} else if scriptFile := ctx.String("file"); scriptFile != "" {
		scriptBytes, err := os.ReadFile(scriptFile)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–ø—Ç–∞: %w", err)
		}
		script = string(scriptBytes)
	} else if ctx.Bool("stdin") {
		scriptBytes, err := io.ReadAll(os.Stdin)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ stdin: %w", err)
		}
		script = string(scriptBytes)
	} else {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç, --file –∏–ª–∏ --stdin")
	}

	if strings.TrimSpace(script) == "" {
		return fmt.Errorf("—Å–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := &datastore.JSSubscriberConfig{
		ID:               id,
		Script:           script,
		ExecutionTimeout: ctx.Duration("timeout"),
		EnableNetworking: ctx.Bool("networking"),
		EnableLogging:    ctx.Bool("logging"),
		StrictMode:       ctx.Bool("strict"),
	}

	// –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π
	if eventFilters := ctx.StringSlice("events"); len(eventFilters) > 0 {
		var filters []datastore.EventType
		for _, filter := range eventFilters {
			switch strings.ToLower(filter) {
			case "put":
				filters = append(filters, datastore.EventPut)
			case "delete":
				filters = append(filters, datastore.EventDelete)
			case "batch":
				filters = append(filters, datastore.EventBatch)
			default:
				return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: %s (–¥–æ—Å—Ç—É–ø–Ω—ã–µ: put, delete, batch)", filter)
			}
		}
		config.EventFilters = filters
	}

	ctxTimeout, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	err = app.ds.CreateJSSubscription(ctxTimeout, id, script, config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: %w", err)
	}

	fmt.Printf("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '%s' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n", id)

	if len(config.EventFilters) > 0 {
		var eventNames []string
		for _, eventType := range config.EventFilters {
			switch eventType {
			case datastore.EventPut:
				eventNames = append(eventNames, "put")
			case datastore.EventDelete:
				eventNames = append(eventNames, "delete")
			case datastore.EventBatch:
				eventNames = append(eventNames, "batch")
			}
		}
		fmt.Printf("üìã –§–∏–ª—å—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π: %s\n", strings.Join(eventNames, ", "))
	} else {
		fmt.Printf("üìã –§–∏–ª—å—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π: –≤—Å–µ —Å–æ–±—ã—Ç–∏—è\n")
	}

	fmt.Printf("‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", config.ExecutionTimeout)
	fmt.Printf("üåê –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø: %t\n", config.EnableNetworking)
	fmt.Printf("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: %t\n", config.EnableLogging)

	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "subscribe",
		Aliases: []string{"reg", "sub"},
		Usage:   "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π JavaScript",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "file",
				Aliases: []string{"f"},
				Usage:   "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º",
			},
			&cli.BoolFlag{
				Name:    "stdin",
				Aliases: []string{"s"},
				Usage:   "–ß–∏—Ç–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∏–∑ stdin",
			},
			&cli.DurationFlag{
				Name:    "timeout",
				Aliases: []string{"t"},
				Value:   5 * time.Second,
				Usage:   "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5s, 1m)",
			},
			&cli.BoolFlag{
				Name:    "networking",
				Aliases: []string{"n"},
				Value:   true,
				Usage:   "–í–∫–ª—é—á–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞",
			},
			&cli.BoolFlag{
				Name:    "logging",
				Aliases: []string{"l"},
				Value:   true,
				Usage:   "–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞",
			},
			&cli.BoolFlag{
				Name:  "strict",
				Usage: "–í–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º JavaScript",
			},
			&cli.StringSliceFlag{
				Name:    "events",
				Aliases: []string{"e"},
				Usage:   "–§–∏–ª—å—Ç—Ä —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (put, delete, batch). –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑",
			},
		},
		Action:    registerHandler,
		ArgsUsage: "<ID> [—Å–∫—Ä–∏–ø—Ç]",
		Description: `–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π JavaScript –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ.
–°–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç—Ä–µ–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
1. –ö–∞–∫ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç: register my-handler "console.log('Hello')"
2. –ò–∑ —Ñ–∞–π–ª–∞: register my-handler --file script.js
3. –ò–∑ stdin: echo "console.log('Hello')" | ues-ds register my-handler --stdin

–í —Å–∫—Ä–∏–ø—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã:
- event: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è —Å –ø–æ–ª—è–º–∏ type, key, value, timestamp, metadata
- console: –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (log, error, info)
- JSON: –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON (parse, stringify)
- Strings: —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
- Crypto: –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (md5, sha256)
- Time: —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (now, format, parse)
- HTTP: HTTP –∑–∞–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω networking)

–ü—Ä–∏–º–µ—Ä—ã:
  ues-ds register logger "console.log('Event:', event.type, event.key)"
  ues-ds register webhook --file webhook.js --events put --events delete
  echo "console.log('Key updated:', event.key)" | ues-ds register updater --stdin`,
	})
}

package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"ues-lite/datastore"

	"github.com/urfave/cli/v2"
)

func serveCommand(ctx *cli.Context) error {
	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
	config := &datastore.Config{
		Host:                 ctx.String("host"),
		Port:                 ctx.Int("port"),
		EnableCORS:           ctx.Bool("cors"),
		EnableMetrics:        ctx.Bool("metrics"),
		EnableAuth:           ctx.Bool("auth"),
		AuthToken:            ctx.String("auth-token"),
		LogRequests:          ctx.Bool("log-requests"),
		RequestTimeout:       ctx.Duration("request-timeout"),
		ReadTimeout:          ctx.Duration("read-timeout"),
		WriteTimeout:         ctx.Duration("write-timeout"),
		IdleTimeout:          ctx.Duration("idle-timeout"),
		ShutdownTimeout:      ctx.Duration("shutdown-timeout"),
		MaxRequestSize:       ctx.Int64("max-request-size"),
		RateLimitRPS:         ctx.Float64("rate-limit-rps"),
		RateLimitBurst:       ctx.Int("rate-limit-burst"),
		EnableCompression:    ctx.Bool("compression"),
		EnableStructuredLogs: ctx.Bool("structured-logs"),
	}

	// –°–æ–∑–¥–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
	server := datastore.NewAPIServer(app.ds, config)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	serverCtx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	errChan := make(chan error, 1)
	go func() {
		fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ %s:%d\n", config.Host, config.Port)

		if config.EnableMetrics {
			fmt.Printf("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ http://%s:%d/metrics\n", config.Host, config.Port)
		}

		fmt.Printf("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://%s:%d/api/v1/docs\n", config.Host, config.Port)

		if err := server.Start(serverCtx); err != nil {
			errChan <- err
		}
	}()

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫—É
	select {
	case <-sigChan:
		fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
		cancel()
	case err := <-errChan:
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %w", err)
		}
	}

	fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "serve",
		Aliases: []string{"server", "api"},
		Usage:   "–ó–∞–ø—É—Å—Ç–∏—Ç—å HTTP API —Å–µ—Ä–≤–µ—Ä",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "host",
				Aliases: []string{"H"},
				Value:   "localhost",
				Usage:   "–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
				EnvVars: []string{"UES_HOST"},
			},
			&cli.IntFlag{
				Name:    "port",
				Aliases: []string{"p"},
				Value:   8080,
				Usage:   "–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞",
				EnvVars: []string{"UES_PORT"},
			},
			&cli.BoolFlag{
				Name:  "cors",
				Value: true,
				Usage: "–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É CORS",
			},
			&cli.BoolFlag{
				Name:  "metrics",
				Value: true,
				Usage: "–í–∫–ª—é—á–∏—Ç—å Prometheus –º–µ—Ç—Ä–∏–∫–∏",
			},
			&cli.BoolFlag{
				Name:  "auth",
				Usage: "–í–∫–ª—é—á–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
			},
			&cli.StringFlag{
				Name:    "auth-token",
				Usage:   "–¢–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)",
				EnvVars: []string{"UES_AUTH_TOKEN"},
			},
			&cli.BoolFlag{
				Name:  "log-requests",
				Value: true,
				Usage: "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å HTTP –∑–∞–ø—Ä–æ—Å—ã",
			},
			&cli.DurationFlag{
				Name:  "request-timeout",
				Value: 30000000000, // 30s
				Usage: "–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
			},
			&cli.DurationFlag{
				Name:  "read-timeout",
				Value: 30000000000, // 30s
				Usage: "–¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞",
			},
			&cli.DurationFlag{
				Name:  "write-timeout",
				Value: 30000000000, // 30s
				Usage: "–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞",
			},
			&cli.DurationFlag{
				Name:  "idle-timeout",
				Value: 60000000000, // 60s
				Usage: "–¢–∞–π–º–∞—É—Ç –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
			},
			&cli.DurationFlag{
				Name:  "shutdown-timeout",
				Value: 30000000000, // 30s
				Usage: "–¢–∞–π–º–∞—É—Ç graceful shutdown",
			},
			&cli.Int64Flag{
				Name:  "max-request-size",
				Value: 33554432, // 32MB
				Usage: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö",
			},
			&cli.Float64Flag{
				Name:  "rate-limit-rps",
				Value: 100.0,
				Usage: "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
			},
			&cli.IntFlag{
				Name:  "rate-limit-burst",
				Value: 200,
				Usage: "–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è rate limiting",
			},
			&cli.BoolFlag{
				Name:  "compression",
				Value: true,
				Usage: "–í–∫–ª—é—á–∏—Ç—å —Å–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤",
			},
			&cli.BoolFlag{
				Name:  "structured-logs",
				Value: true,
				Usage: "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
			},
		},
		Action: serveCommand,
		Description: `–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞.

–°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç RESTful API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞—Å—Ç–æ—Ä–æ–º, –≤–∫–ª—é—á–∞—è:
- CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª—é—á–∞–º–∏
- JQ –∑–∞–ø—Ä–æ—Å—ã –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
- Views (–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
- Transform –æ–ø–µ—Ä–∞—Ü–∏–∏
- Streaming –¥–∞–Ω–Ω—ã—Ö
- JavaScript –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
- –ú–µ—Ç—Ä–∏–∫–∏ Prometheus

–ü—Ä–∏–º–µ—Ä—ã:
  # –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 8080
  ues-ds serve
  
  # –ó–∞–ø—É—Å–∫ –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  ues-ds serve --port 9000 --auth --auth-token secret123
  
  # –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
  ues-ds serve --request-timeout 60s --rate-limit-rps 200

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  UES_HOST         - —Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
  UES_PORT         - –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞  
  UES_AUTH_TOKEN   - —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`,
	})
}

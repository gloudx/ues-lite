package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gorilla/mux"
	"github.com/urfave/cli/v2"
)

func serveCommand(ctx *cli.Context) error {
	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	host := ctx.String("host")
	port := ctx.Int("port")
	unixSocket := ctx.String("unix-socket")
	enableCORS := ctx.Bool("cors")
	logRequests := ctx.Bool("log-requests")

	// –°–æ–∑–¥–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
	apiServer := &APIServer{
		app:         app,
		enableCORS:  enableCORS,
		logRequests: logRequests,
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	router := mux.NewRouter()
	apiServer.setupRoutes(router)

	server := &http.Server{
		Handler:      router,
		ReadTimeout:  30 * time.Second,
		WriteTimeout: 30 * time.Second,
		IdleTimeout:  120 * time.Second,
	}

	// –ö–∞–Ω–∞–ª –¥–ª—è graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	var listener net.Listener
	if unixSocket != "" {
		// Unix socket
		os.Remove(unixSocket) // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–æ–∫–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
		listener, err = net.Listen("unix", unixSocket)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Unix socket: %w", err)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if err := os.Chmod(unixSocket, 0666); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ–∫–µ—Ç–∞: %w", err)
		}

		fmt.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Unix socket: %s\n", unixSocket)
	} else {
		// TCP
		addr := fmt.Sprintf("%s:%d", host, port)
		listener, err = net.Listen("tcp", addr)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TCP —Å–µ—Ä–≤–µ—Ä–∞: %w", err)
		}

		fmt.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://%s\n", addr)
	}

	fmt.Printf("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É /api/docs\n")
	fmt.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É /api/stats\n")
	fmt.Printf("‚ùå –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n\n")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := server.Serve(listener); err != nil && err != http.ErrServerClosed {
			log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-quit
	fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

	// Graceful shutdown
	ctxShutdown, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctxShutdown); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown: %v\n", err)
		return err
	}

	// –£–¥–∞–ª—è–µ–º Unix socket –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	if unixSocket != "" {
		os.Remove(unixSocket)
	}

	fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "serve",
		Aliases: []string{"server", "srv"},
		Usage:   "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å REST API",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "host",
				Aliases: []string{"H"},
				Value:   "localhost",
				Usage:   "–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
				EnvVars: []string{"UES_SERVER_HOST"},
			},
			&cli.IntFlag{
				Name:    "port",
				Aliases: []string{"p"},
				Value:   8080,
				Usage:   "–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞",
				EnvVars: []string{"UES_SERVER_PORT"},
			},
			&cli.StringFlag{
				Name:    "unix-socket",
				Aliases: []string{"u"},
				Usage:   "–ü—É—Ç—å –∫ Unix socket (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ TCP)",
				EnvVars: []string{"UES_UNIX_SOCKET"},
			},
			&cli.BoolFlag{
				Name:    "cors",
				Aliases: []string{"c"},
				Value:   true,
				Usage:   "–í–∫–ª—é—á–∏—Ç—å CORS –ø–æ–¥–¥–µ—Ä–∂–∫—É",
			},
			&cli.BoolFlag{
				Name:    "log-requests",
				Aliases: []string{"l"},
				Value:   true,
				Usage:   "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å HTTP –∑–∞–ø—Ä–æ—Å—ã",
			},
		},
		Action: serveCommand,
		Description: `–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å REST API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞—Å—Ç–æ—Ä–æ–º.

–°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ TCP –∏–ª–∏ Unix socket.

REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
  GET    /api/keys                 - —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
  GET    /api/keys/{key}           - –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
  PUT    /api/keys/{key}           - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
  DELETE /api/keys/{key}           - —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á
  GET    /api/keys/{key}/info      - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ
  POST   /api/search               - –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–π
  GET    /api/stats                - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞
  DELETE /api/clear                - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏
  POST   /api/export               - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  POST   /api/import               - –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  GET    /api/subscriptions        - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
  POST   /api/subscriptions        - —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  DELETE /api/subscriptions/{id}   - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  ues-ds serve                                    # TCP –Ω–∞ localhost:8080
  ues-ds serve --port 3000 --host 0.0.0.0       # –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
  ues-ds serve --unix-socket /tmp/ues-ds.sock    # Unix socket
  ues-ds serve --cors=false --log-requests=false # –ë–µ–∑ CORS –∏ –ª–æ–≥–æ–≤`,
	})
}

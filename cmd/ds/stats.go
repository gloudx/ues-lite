package main

import (
	"context"
	"fmt"
	"os"
	"time"

	ds "github.com/ipfs/go-datastore"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func stats(ctx *cli.Context) error {

	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	ctxTimeout, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–∏
	keysChan, errChan, err := app.ds.Keys(ctxTimeout, ds.NewKey("/"))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: %w", err)
	}

	totalKeys := 0
	for {
		select {
		case _, ok := <-keysChan:
			if !ok {
				goto countDone
			}
			totalKeys++
		case err := <-errChan:
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∫–ª—é—á–µ–π: %w", err)
			}
		}
	}

countDone:
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
	kvChan, errChan2, err := app.ds.Iterator(ctxTimeout, ds.NewKey("/"), false)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: %w", err)
	}

	var totalSize int64
	for {
		select {
		case kv, ok := <-kvChan:
			if !ok {
				goto sizeDone
			}
			totalSize += int64(len(kv.Value))
		case err := <-errChan2:
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Ä–∞–∑–º–µ—Ä–∞: %w", err)
			}
		}
	}

sizeDone:
	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.SetStyle(table.StyleColoredBright)
	t.SetTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞")

	t.AppendRow(table.Row{"–ü—É—Ç—å", ctx.String("path")})
	t.AppendRow(table.Row{"–í—Å–µ–≥–æ –∫–ª—é—á–µ–π", totalKeys})
	t.AppendRow(table.Row{"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π", formatBytes(totalSize)})

	if totalKeys > 0 {
		avgSize := totalSize / int64(totalKeys)
		t.AppendRow(table.Row{"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è", formatBytes(avgSize)})
	}

	t.Render()
	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:   "stats",
		Usage:  "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—Ç–∞—Å—Ç–æ—Ä–∞",
		Action: stats,
	})
}

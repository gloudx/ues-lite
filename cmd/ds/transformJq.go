package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"time"
	"ues-lite/datastore"

	ds "github.com/ipfs/go-datastore"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func transformJq(ctx *cli.Context) error {
	if ctx.NArg() < 1 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è JQ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
	}

	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	jqExpression := ctx.Args().Get(0)
	key := ctx.String("key")
	prefix := ctx.String("prefix")
	dryRun := ctx.Bool("dry-run")
	output := ctx.String("output")
	silent := ctx.Bool("silent")

	if silent {
		app.ds.SetSilentMode(true)
		defer app.ds.SetSilentMode(false)
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
	opts := &datastore.TransformOptions{
		TreatAsString: ctx.Bool("treat-as-string"),
		IgnoreErrors:  ctx.Bool("ignore-errors"),
		DryRun:        dryRun,
		Timeout:       ctx.Duration("timeout"),
		BatchSize:     ctx.Int("batch-size"),
		JQExpression:  jqExpression,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
	if prefix != "" {
		opts.Prefix = ds.NewKey(prefix)
	}

	ctxTimeout, cancel := context.WithTimeout(context.Background(), opts.Timeout)
	defer cancel()

	var dsKey ds.Key
	if key != "" {
		dsKey = ds.NewKey(key)
	}

	fmt.Printf("üîÑ JQ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: %s\n", jqExpression)
	if key != "" {
		fmt.Printf("üîë –ö–ª—é—á: %s\n", key)
	} else if prefix != "" {
		fmt.Printf("üìÅ –ü—Ä–µ—Ñ–∏–∫—Å: %s\n", prefix)
	}
	if dryRun {
		fmt.Printf("üîç –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä (dry-run)\n")
	}

	start := time.Now()

	summary, err := app.ds.TransformWithJQ(ctxTimeout, dsKey, jqExpression, opts)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: %w", err)
	}

	duration := time.Since(start)

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	switch output {
	case "json":
		jsonData, err := json.MarshalIndent(summary, "", "  ")
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %w", err)
		}
		fmt.Println(string(jsonData))

	case "table":
		fallthrough
	default:
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
		fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n")
		fmt.Printf("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d\n", summary.TotalProcessed)
		fmt.Printf("   –£—Å–ø–µ—à–Ω–æ: %d\n", summary.Successful)
		if summary.Errors > 0 {
			fmt.Printf("   –û—à–∏–±–æ–∫: %d\n", summary.Errors)
		}
		if summary.Skipped > 0 {
			fmt.Printf("   –ü—Ä–æ–ø—É—â–µ–Ω–æ: %d\n", summary.Skipped)
		}
		fmt.Printf("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", duration)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ
		if len(summary.Results) > 0 && len(summary.Results) <= 20 {
			fmt.Printf("\nüìã –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n")

			t := table.NewWriter()
			t.SetOutputMirror(os.Stdout)
			t.SetStyle(table.StyleColoredBright)

			t.AppendHeader(table.Row{"–ö–ª—é—á", "–°—Ç–∞—Ç—É—Å", "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–û—à–∏–±–∫–∞"})

			for _, result := range summary.Results {
				status := "‚úÖ"
				errorMsg := ""

				if result.Error != nil {
					status = "‚ùå"
					errorMsg = result.Error.Error()
					if len(errorMsg) > 50 {
						errorMsg = errorMsg[:47] + "..."
					}
				} else if result.Skipped {
					status = "‚è≠Ô∏è"
					errorMsg = "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
				}

				newValue := ""
				if result.NewValue != nil {
					if jsonBytes, err := json.Marshal(result.NewValue); err == nil {
						newValue = string(jsonBytes)
						if len(newValue) > 80 {
							newValue = newValue[:77] + "..."
						}
					} else {
						newValue = fmt.Sprintf("%v", result.NewValue)
						if len(newValue) > 80 {
							newValue = newValue[:77] + "..."
						}
					}
				}

				keyStr := result.Key.String()
				if len(keyStr) > 30 {
					keyStr = keyStr[:27] + "..."
				}

				t.AppendRow(table.Row{keyStr, status, newValue, errorMsg})
			}

			t.Render()
		} else if len(summary.Results) > 20 {
			fmt.Printf("\n   (–¥–µ—Ç–∞–ª–∏ —Å–∫—Ä—ã—Ç—ã, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d)\n", len(summary.Results))
		}
	}

	return nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "transform-jq",
		Aliases: []string{"tjq", "transform"},
		Usage:   "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é JQ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "key",
				Aliases: []string{"k"},
				Usage:   "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á",
			},
			&cli.StringFlag{
				Name:    "prefix",
				Aliases: []string{"p"},
				Value:   "/",
				Usage:   "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
			},
			&cli.BoolFlag{
				Name:    "dry-run",
				Aliases: []string{"n"},
				Usage:   "–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å",
			},
			&cli.StringFlag{
				Name:    "output",
				Aliases: []string{"o"},
				Value:   "table",
				Usage:   "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (table, json)",
			},
			&cli.BoolFlag{
				Name:  "treat-as-string",
				Usage: "–¢—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏",
			},
			&cli.BoolFlag{
				Name:  "ignore-errors",
				Usage: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
			},
			&cli.DurationFlag{
				Name:  "timeout",
				Value: 60 * time.Second,
				Usage: "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏",
			},
			&cli.IntFlag{
				Name:    "batch-size",
				Aliases: []string{"b"},
				Value:   100,
				Usage:   "–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
			},
			&cli.BoolFlag{
				Name:  "silent",
				Usage: "–û—Ç–∫–ª—é—á–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏",
			},
		},
		Action:    transformJq,
		ArgsUsage: "<jq-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>",
		Description: `–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ —Å –ø–æ–º–æ—â—å—é JQ –≤—ã—Ä–∞–∂–µ–Ω–∏–π.

JQ - –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π:
- –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
- –ò–∑–º–µ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤  
- –í—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è

–ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º (--key) –∏–ª–∏ —Å–æ –≤—Å–µ–º–∏ –∫–ª—é—á–∞–º–∏ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É (--prefix).
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ dry-run, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ.

–ü—Ä–∏–º–µ—Ä—ã JQ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π:

1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ:
   ues-ds transform-jq '. + {updated_at: now}' --prefix /users/

2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–ª—è:
   ues-ds transform-jq '{id: .user_id, name: .full_name, email}' --key /user/123

3. –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
   ues-ds transform-jq '.total = (.price * .quantity)' --prefix /orders/

4. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å:
   ues-ds transform-jq 'select(.active == true) | {name, email, last_login}' --prefix /users/

5. –†–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Å—Å–∏–≤–∞–º–∏:
   ues-ds transform-jq '.items |= map(select(.available == true))' --key /inventory

6. –ß–∏—Å–ª–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:
   ues-ds transform-jq '.score = (.points / .max_points * 100 | round)' --prefix /results/

–§–ª–∞–≥–∏:
  --dry-run: —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  --treat-as-string: –Ω–µ –ø–∞—Ä—Å–∏—Ç—å JSON, —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
  --ignore-errors: –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ —Å –æ—à–∏–±–∫–∞–º–∏
  --batch-size: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`,
	})
}

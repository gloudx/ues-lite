package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"time"
	"ues-lite/datastore"

	ds "github.com/ipfs/go-datastore"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func transformPatch(ctx *cli.Context) error {
	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	key := ctx.String("key")
	prefix := ctx.String("prefix")
	dryRun := ctx.Bool("dry-run")
	output := ctx.String("output")
	silent := ctx.Bool("silent")
	patchOpsStr := ctx.StringSlice("patch")

	if silent {
		app.ds.SetSilentMode(true)
		defer app.ds.SetSilentMode(false)
	}

	if len(patchOpsStr) == 0 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ patch –æ–ø–µ—Ä–∞—Ü–∏—è (--patch)")
	}

	// –ü–∞—Ä—Å–∏–º patch –æ–ø–µ—Ä–∞—Ü–∏–∏
	var patchOps []datastore.PatchOp
	for _, patchStr := range patchOpsStr {
		op, err := parsePatchOperation(patchStr)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ patch –æ–ø–µ—Ä–∞—Ü–∏–∏ '%s': %w", patchStr, err)
		}
		patchOps = append(patchOps, op)
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
	opts := &datastore.TransformOptions{
		TreatAsString:   ctx.Bool("treat-as-string"),
		IgnoreErrors:    ctx.Bool("ignore-errors"),
		DryRun:          dryRun,
		Timeout:         ctx.Duration("timeout"),
		BatchSize:       ctx.Int("batch-size"),
		PatchOperations: patchOps,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
	if prefix != "" {
		opts.Prefix = ds.NewKey(prefix)
	}

	ctxTimeout, cancel := context.WithTimeout(context.Background(), opts.Timeout)
	defer cancel()

	var dsKey ds.Key
	if key != "" {
		dsKey = ds.NewKey(key)
	}

	fmt.Printf("üîÑ JSON Patch —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è:\n")
	for i, op := range patchOps {
		fmt.Printf("   %d. %s %s", i+1, op.Op, op.Path)
		if op.Value != nil {
			if jsonBytes, err := json.Marshal(op.Value); err == nil {
				fmt.Printf(" = %s", string(jsonBytes))
			}
		}
		fmt.Println()
	}

	if key != "" {
		fmt.Printf("üîë –ö–ª—é—á: %s\n", key)
	} else if prefix != "" {
		fmt.Printf("üìÅ –ü—Ä–µ—Ñ–∏–∫—Å: %s\n", prefix)
	}
	if dryRun {
		fmt.Printf("üîç –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä (dry-run)\n")
	}

	start := time.Now()

	summary, err := app.ds.TransformWithPatch(ctxTimeout, dsKey, patchOps, opts)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ patch —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: %w", err)
	}

	duration := time.Since(start)

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	switch output {
	case "json":
		jsonData, err := json.MarshalIndent(summary, "", "  ")
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %w", err)
		}
		fmt.Println(string(jsonData))

	case "table":
		fallthrough
	default:
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
		fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç patch —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n")
		fmt.Printf("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d\n", summary.TotalProcessed)
		fmt.Printf("   –£—Å–ø–µ—à–Ω–æ: %d\n", summary.Successful)
		if summary.Errors > 0 {
			fmt.Printf("   –û—à–∏–±–æ–∫: %d\n", summary.Errors)
		}
		if summary.Skipped > 0 {
			fmt.Printf("   –ü—Ä–æ–ø—É—â–µ–Ω–æ: %d\n", summary.Skipped)
		}
		fmt.Printf("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", duration)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ
		if len(summary.Results) > 0 && len(summary.Results) <= 20 {
			fmt.Printf("\nüìã –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n")

			t := table.NewWriter()
			t.SetOutputMirror(os.Stdout)
			t.SetStyle(table.StyleColoredBright)

			t.AppendHeader(table.Row{"–ö–ª—é—á", "–°—Ç–∞—Ç—É—Å", "–û—Ä–∏–≥–∏–Ω–∞–ª", "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–û—à–∏–±–∫–∞"})

			for _, result := range summary.Results {
				status := "‚úÖ"
				errorMsg := ""

				if result.Error != nil {
					status = "‚ùå"
					errorMsg = result.Error.Error()
					if len(errorMsg) > 30 {
						errorMsg = errorMsg[:27] + "..."
					}
				} else if result.Skipped {
					status = "‚è≠Ô∏è"
					errorMsg = "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
				}

				originalValue := ""
				newValue := ""

				if result.OriginalValue != nil {
					if jsonBytes, err := json.Marshal(result.OriginalValue); err == nil {
						originalValue = string(jsonBytes)
						if len(originalValue) > 50 {
							originalValue = originalValue[:47] + "..."
						}
					}
				}

				if result.NewValue != nil {
					if jsonBytes, err := json.Marshal(result.NewValue); err == nil {
						newValue = string(jsonBytes)
						if len(newValue) > 50 {
							newValue = newValue[:47] + "..."
						}
					}
				}

				keyStr := result.Key.String()
				if len(keyStr) > 25 {
					keyStr = keyStr[:22] + "..."
				}

				t.AppendRow(table.Row{keyStr, status, originalValue, newValue, errorMsg})
			}

			t.Render()
		} else if len(summary.Results) > 20 {
			fmt.Printf("\n   (–¥–µ—Ç–∞–ª–∏ —Å–∫—Ä—ã—Ç—ã, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d)\n", len(summary.Results))
		}
	}

	return nil
}

func parsePatchOperation(patchStr string) (datastore.PatchOp, error) {
	// –§–æ—Ä–º–∞—Ç: "op:path:value" –∏–ª–∏ "op:path" –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è
	parts := strings.SplitN(patchStr, ":", 3)

	if len(parts) < 2 {
		return datastore.PatchOp{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç patch –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ–∂–∏–¥–∞–µ—Ç—Å—è 'op:path' –∏–ª–∏ 'op:path:value'")
	}

	op := datastore.PatchOp{
		Op:   strings.ToLower(parts[0]),
		Path: parts[1],
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
	validOps := map[string]bool{
		"replace": true,
		"add":     true,
		"remove":  true,
		"copy":    true,
		"move":    true,
		"test":    true,
	}

	if !validOps[op.Op] {
		return datastore.PatchOp{}, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è patch –æ–ø–µ—Ä–∞—Ü–∏—è: %s", op.Op)
	}

	// –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π remove –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
	if op.Op == "remove" {
		return op, nil
	}

	// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω—É–∂–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
	if len(parts) < 3 {
		return datastore.PatchOp{}, fmt.Errorf("–æ–ø–µ—Ä–∞—Ü–∏—è %s —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ", op.Op)
	}

	valueStr := parts[2]

	// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ JSON, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
	var value interface{}
	if err := json.Unmarshal([]byte(valueStr), &value); err != nil {
		// –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
		value = valueStr
	}

	op.Value = value
	return op, nil
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "transform-patch",
		Aliases: []string{"tpatch", "patch"},
		Usage:   "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é JSON Patch –æ–ø–µ—Ä–∞—Ü–∏–π",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "key",
				Aliases: []string{"k"},
				Usage:   "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á",
			},
			&cli.StringFlag{
				Name:    "prefix",
				Aliases: []string{"p"},
				Value:   "/",
				Usage:   "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
			},
			&cli.StringSliceFlag{
				Name:    "patch",
				Aliases: []string{"op"},
				Usage:   "Patch –æ–ø–µ—Ä–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'op:path:value' (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
			},
			&cli.BoolFlag{
				Name:    "dry-run",
				Aliases: []string{"n"},
				Usage:   "–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å",
			},
			&cli.StringFlag{
				Name:    "output",
				Aliases: []string{"o"},
				Value:   "table",
				Usage:   "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (table, json)",
			},
			&cli.BoolFlag{
				Name:  "treat-as-string",
				Usage: "–¢—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏",
			},
			&cli.BoolFlag{
				Name:  "ignore-errors",
				Usage: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
			},
			&cli.DurationFlag{
				Name:  "timeout",
				Value: 60 * time.Second,
				Usage: "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏",
			},
			&cli.IntFlag{
				Name:    "batch-size",
				Aliases: []string{"b"},
				Value:   100,
				Usage:   "–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
			},
			&cli.BoolFlag{
				Name:  "silent",
				Usage: "–û—Ç–∫–ª—é—á–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏",
			},
		},
		Action:    transformPatch,
		ArgsUsage: " ",
		Description: `–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é JSON Patch –æ–ø–µ—Ä–∞—Ü–∏–π (RFC 6902).

JSON Patch –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—á–µ—á–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å JSON –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
- replace: –∑–∞–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
- add: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
- remove: —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
- copy: —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –¥—Ä—É–≥–æ–µ
- move: –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
- test: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–º—É

–§–æ—Ä–º–∞—Ç patch –æ–ø–µ—Ä–∞—Ü–∏–π: '–æ–ø–µ—Ä–∞—Ü–∏—è:–ø—É—Ç—å:–∑–Ω–∞—á–µ–Ω–∏–µ'
–ü—É—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JSON Pointer —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (/field/subfield/0)

–ü—Ä–∏–º–µ—Ä—ã:

1. –ó–∞–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è:
   ues-ds transform-patch --patch 'replace:/status:"active"' --key /user/123

2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ:
   ues-ds transform-patch --patch 'add:/updated_at:"2025-01-01T00:00:00Z"' --prefix /users/

3. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ:
   ues-ds transform-patch --patch 'remove:/temporary_field' --prefix /data/

4. –ù–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:
   ues-ds transform-patch \\
     --patch 'replace:/status:"inactive"' \\
     --patch 'add:/deactivated_at:"2025-01-01T00:00:00Z"' \\
     --patch 'remove:/session_token' \\
     --prefix /users/

5. –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü):
   ues-ds transform-patch --patch 'add:/tags/-:"new-tag"' --key /post/456

6. –†–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
   ues-ds transform-patch --patch 'replace:/price:99.99' --key /product/789

–¢–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π:
- –°—Ç—Ä–æ–∫–∏: "text" 
- –ß–∏—Å–ª–∞: 42, 3.14
- –ë—É–ª–µ–≤—ã: true, false
- Null: null
- JSON –æ–±—ä–µ–∫—Ç—ã: {"key":"value"}
- JSON –º–∞—Å—Å–∏–≤—ã: [1,2,3]

–§–ª–∞–≥–∏:
  --dry-run: —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  --ignore-errors: –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ —Å –æ—à–∏–±–∫–∞–º–∏
  --batch-size: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`,
	})
}

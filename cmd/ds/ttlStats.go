package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"time"

	ds "github.com/ipfs/go-datastore"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/urfave/cli/v2"
)

func ttlStats(ctx *cli.Context) error {
	app, err := initApp(ctx)
	if err != nil {
		return err
	}
	defer app.Close()

	prefix := ctx.String("prefix")
	format := ctx.String("format")
	export := ctx.Bool("export")

	ctxTimeout, cancel := context.WithTimeout(context.Background(), ctx.Duration("timeout"))
	defer cancel()

	dsPrefix := ds.NewKey(prefix)

	if export {
		// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
		return exportTTLReport(ctxTimeout, app, dsPrefix, format)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TTL
	stats, err := app.ds.GetTTLStats(ctxTimeout, dsPrefix)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TTL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %w", err)
	}

	// –í—ã–≤–æ–¥–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
	switch format {
	case "json":
		jsonData, err := json.MarshalIndent(stats, "", "  ")
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %w", err)
		}
		fmt.Println(string(jsonData))

	case "table":
		fallthrough
	default:
		// –¢–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		t := table.NewWriter()
		t.SetOutputMirror(os.Stdout)
		t.SetStyle(table.StyleColoredBright)
		t.SetTitle(fmt.Sprintf("‚è∞ TTL –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ '%s'", prefix))

		t.AppendRow(table.Row{"–í—Å–µ–≥–æ –∫–ª—é—á–µ–π", stats.TotalKeys})
		t.AppendRow(table.Row{"–ö–ª—é—á–∏ —Å TTL", stats.TotalKeys - stats.KeysWithoutTTL})
		t.AppendRow(table.Row{"–ö–ª—é—á–∏ –±–µ–∑ TTL", stats.KeysWithoutTTL})
		t.AppendRow(table.Row{"–ò—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏", stats.ExpiredKeys})
		t.AppendRow(table.Row{"–ò—Å—Ç–µ–∫–∞—é—Ç —Å–∫–æ—Ä–æ (5–º–∏–Ω)", stats.ExpiringKeys})

		if stats.AverageTimeLeft > 0 {
			t.AppendRow(table.Row{"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è", formatDuration(stats.AverageTimeLeft)})
		}

		if stats.NextExpiration != nil {
			timeUntilNext := time.Until(*stats.NextExpiration)
			if timeUntilNext > 0 {
				t.AppendRow(table.Row{"–°–ª–µ–¥—É—é—â–µ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑", formatDuration(timeUntilNext)})
				t.AppendRow(table.Row{"–°–ª–µ–¥—É—é—â–µ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤", stats.NextExpiration.Format("2006-01-02 15:04:05")})
			} else {
				t.AppendRow(table.Row{"–°–ª–µ–¥—É—é—â–µ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ", "—É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ"})
				t.AppendRow(table.Row{"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è", stats.NextExpiration.Format("2006-01-02 15:04:05")})
			}
		}

		t.Render()

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
		if stats.ExpiredKeys > 0 {
			fmt.Printf("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ %d –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'ttl-cleanup' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.\n", stats.ExpiredKeys)
		}

		if stats.ExpiringKeys > 0 {
			fmt.Printf("\n‚è∞ %d –∫–ª—é—á–µ–π –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç.\n", stats.ExpiringKeys)
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ TTL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
		monitorConfig := app.ds.GetTTLMonitorConfig()
		if monitorConfig != nil {
			fmt.Printf("\nüìä TTL –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ")
			if monitorConfig.Enabled {
				fmt.Printf("‚úÖ –≤–∫–ª—é—á–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: %v)\n", monitorConfig.CheckInterval)
			} else {
				fmt.Printf("‚ùå –æ—Ç–∫–ª—é—á–µ–Ω\n")
			}
		}
	}

	return nil
}

func exportTTLReport(ctx context.Context, app *app, prefix ds.Key, format string) error {
	fmt.Printf("üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ TTL –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ '%s'...\n", prefix.String())

	return nil
}

func formatDuration(d time.Duration) string {
	if d < time.Minute {
		return fmt.Sprintf("%.0f—Å", d.Seconds())
	} else if d < time.Hour {
		return fmt.Sprintf("%.1f–º", d.Minutes())
	} else if d < 24*time.Hour {
		return fmt.Sprintf("%.1f—á", d.Hours())
	} else {
		days := d.Hours() / 24
		return fmt.Sprintf("%.1f–¥", days)
	}
}

func init() {
	commands = append(commands, &cli.Command{
		Name:    "ttl-stats",
		Aliases: []string{"ttl-stat", "ts"},
		Usage:   "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TTL –∫–ª—é—á–µ–π",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "prefix",
				Aliases: []string{"p"},
				Value:   "/",
				Usage:   "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–π",
			},
			&cli.StringFlag{
				Name:    "format",
				Aliases: []string{"f"},
				Value:   "table",
				Usage:   "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (table, json)",
			},
			&cli.BoolFlag{
				Name:    "export",
				Aliases: []string{"e"},
				Usage:   "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏",
			},
			&cli.DurationFlag{
				Name:  "timeout",
				Value: 60 * time.Second,
				Usage: "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏",
			},
		},
		Action: ttlStats,
		Description: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç TTL –∫–ª—é—á–∏ –≤ –¥–∞—Ç–∞—Å—Ç–æ—Ä–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

–ö–æ–º–∞–Ω–¥–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:
- –û–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π
- –ö–ª—é—á–∞—Ö —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º TTL –∏ –±–µ–∑ –Ω–µ–≥–æ
- –ò—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–∞—Ö, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—á–∏—Å—Ç–∫–∏
- –ö–ª—é—á–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫—É—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
- –°—Ä–µ–¥–Ω–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –ë–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è

–í —Ä–µ–∂–∏–º–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ (--export) —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
–∫–ª—é—á–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É.

–ü—Ä–∏–º–µ—Ä—ã:
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º
  ues-ds ttl-stats
  
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
  ues-ds ttl-stats --prefix /users/
  
  # –í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
  ues-ds ttl-stats --format json
  
  # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
  ues-ds ttl-stats --export --prefix /sessions/

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
- –ò—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏: –∫–ª—é—á–∏ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º TTL (–Ω—É–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞)
- –ò—Å—Ç–µ–∫–∞—é—Ç —Å–∫–æ—Ä–æ: –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫—É—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç
- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö TTL –∫–ª—é—á–µ–π`,
	})
}

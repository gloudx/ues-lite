package main

import (
	"context"
	"fmt"
	"log"
	"time"
	"ues-lite/datastore" // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É

	sd "github.com/ipfs/go-datastore"
	badger4 "github.com/ipfs/go-ds-badger4"
)

func main() {

	opts := &badger4.DefaultOptions

	ds, err := datastore.NewDatastorage("./.data", opts)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è datastore:", err)
	}
	defer ds.Close()

	ttlConfig := &datastore.TTLMonitorConfig{
		CheckInterval: 1 * time.Second, // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
		Enabled:       true,
		BufferSize:    100,
	}

	err = ds.EnableTTLMonitoring(ttlConfig)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è TTL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", err)
	}

	fmt.Println("TTL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω")

	ttlScript := `
		if (event.type === "ttl_expired") {
			console.log("TTL –∏—Å—Ç–µ–∫ –¥–ª—è –∫–ª—é—á–∞:", event.key);
			console.log("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", event.value);
			console.log("–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è:", event.metadata.expired_at);
		} else if (event.type === "put") {
			console.log("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", event.key, "=", event.value);
		}
	`

	err = ds.CreateFilteredJSSubscription(
		context.Background(),
		"ttl-monitor",
		ttlScript,
		datastore.EventTTLExpired, // —Å–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ TTL —Å–æ–±—ã—Ç–∏—è
		datastore.EventPut,        // –∏ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JS –ø–æ–¥–ø–∏—Å–∫–∏:", err)
	}

	fmt.Println("JS –ø–æ–¥–ø–∏—Å—á–∏–∫ —Å–æ–∑–¥–∞–Ω")

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	channelSub := ds.SubscribeChannel("channel-ttl", 10)
	defer channelSub.Close()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
	go func() {
		for event := range channelSub.Events() {
			if event.Type == datastore.EventTTLExpired {
				fmt.Printf("CHANNEL: TTL –∏—Å—Ç–µ–∫ –¥–ª—è –∫–ª—é—á–∞ %s (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %s)\n",
					event.Key.String(), string(event.Value))
			}
		}
	}()

	ctx := context.Background()

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º TTL —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
	fmt.Println("\n=== –¢–µ—Å—Ç TTL —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ===")

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º TTL
	testKeys := []struct {
		key   string
		value string
		ttl   time.Duration
	}{
		{"test/short", "–∫–æ—Ä–æ—Ç–∫–∏–π TTL", 3 * time.Second},
		{"test/medium", "—Å—Ä–µ–¥–Ω–∏–π TTL", 8 * time.Second},
		{"test/long", "–¥–ª–∏–Ω–Ω—ã–π TTL", 15 * time.Second},
	}

	for _, tk := range testKeys {
		key := sd.NewKey(tk.key)
		err = ds.PutWithTTL(ctx, key, []byte(tk.value), tk.ttl)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TTL –¥–ª—è %s: %v", tk.key, err)
			continue
		}
		fmt.Printf("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TTL %v –¥–ª—è –∫–ª—é—á–∞ %s\n", tk.ttl, tk.key)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª—é—á –±–µ–∑ TTL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	normalKey := sd.NewKey("test/normal")
	err = ds.Put(ctx, normalKey, []byte("–æ–±—ã—á–Ω—ã–π –∫–ª—é—á –±–µ–∑ TTL"))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∫–ª—é—á–∞: %v", err)
	} else {
		fmt.Println("–î–æ–±–∞–≤–ª–µ–Ω –æ–±—ã—á–Ω—ã–π –∫–ª—é—á –±–µ–∑ TTL")
	}

	fmt.Println("\n–û–∂–∏–¥–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL –∫–ª—é—á–µ–π...")
	fmt.Println("(–ü–µ—Ä–≤—ã–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –∏—Å—Ç–µ—á—å —á–µ—Ä–µ–∑ ~3 —Å–µ–∫—É–Ω–¥—ã)")

	/**
		// –ñ–¥–µ–º —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–±—ã—Ç–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
		time.Sleep(20 * time.Second)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –æ—Å—Ç–∞–ª–∏—Å—å
		fmt.Println("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª—é—á–µ–π ===")
		keysCh, errCh, err := ds.Keys(ctx, sd.NewKey("test/"))
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:", err)
		}

		remainingKeys := []string{}
		for {
			select {
			case err, ok := <-errCh:
				if ok && err != nil {
					log.Printf("–û—à–∏–±–∫–∞: %v", err)
				}
			case key, ok := <-keysCh:
				if !ok {
					goto done
				}
				remainingKeys = append(remainingKeys, key.String())
			}
		}

	done:
		if len(remainingKeys) > 0 {
			fmt.Println("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–ª—é—á–∏:")
			for _, key := range remainingKeys {
				fmt.Printf("  - %s\n", key)
			}
		} else {
			fmt.Println("–í—Å–µ –∫–ª—é—á–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ TTL")
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é TTL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
		// config := ds.GetTTLMonitorConfig()
		// if config != nil {
		// 	fmt.Printf("\n–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TTL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n")
		// 	fmt.Printf("  - –í–∫–ª—é—á–µ–Ω: %v\n", config.Enabled)
		// 	fmt.Printf("  - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %v\n", config.CheckInterval)
		// 	fmt.Printf("  - –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: %d\n", config.BufferSize)
		// }
	*/

	select {}

	fmt.Println("\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ JS –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è TTL —Å–æ–±—ã—Ç–∏–π
func createTTLOnlySubscriber(ds datastore.Datastore) error {
	script := `
		if (event.type === "ttl_expired") {
			console.log("üîî TTL –°–û–ë–´–¢–ò–ï:");
			console.log("   –ö–ª—é—á:", event.key);
			console.log("   –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:", event.timestamp);
			console.log("   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", event.value);
			
			if (event.metadata && event.metadata.expired_at) {
				console.log("   –ò—Å—Ç–µ–∫ –≤:", event.metadata.expired_at);
			}
			
			// –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook
			// HTTP.post("https://your-webhook.com/ttl-expired", {
			//     key: event.key,
			//     expired_at: event.metadata.expired_at,
			//     last_value: event.value
			// });
		}
	`

	return ds.CreateFilteredJSSubscription(
		context.Background(),
		"ttl-only-subscriber",
		script,
		datastore.EventTTLExpired,
	)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
func testBatchTTLExpiration(ds datastore.Datastore) error {
	ctx := context.Background()

	fmt.Println("–°–æ–∑–¥–∞–µ–º 10 –∫–ª—é—á–µ–π —Å TTL 2 —Å–µ–∫—É–Ω–¥—ã...")

	for i := 0; i < 10; i++ {
		key := sd.NewKey(fmt.Sprintf("batch/key-%d", i))
		value := fmt.Sprintf("batch value %d", i)

		err := ds.PutWithTTL(ctx, key, []byte(value), 2*time.Second)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ %d: %w", i, err)
		}
	}

	fmt.Println("–û–∂–∏–¥–∞–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL...")
	time.Sleep(5 * time.Second)

	return nil
}
